##########################################################################
# CICD Pipeline
##########################################################################

name: Build
on:
  workflow_call:

env:
  CONFIGURATIONS_REPOSITORY: common-configurations
  GLOBAL_CONFIGURATION: _global.yml
  SECRETS_AZURE_KEYVAULT: CoveredCA-KV-Mulesoft
  MESSAGE_SERVICE_TRIGGER_DEPLOYMENT: The build job triggered the deployment

jobs:

  ##########################################################################
  # BUILD MULESOFT SERVICE
  ##########################################################################

  build:
    name: Build
    runs-on: ubuntu-latest
    permissions: write-all

    steps:

      - name: Get token from Github App
        id: app-token
        uses: CoveredCA/common-devops/packages/app-token@main
        with:
          client-id: ${{ secrets.MULESOFT_GITHUBAPP_CLIENTID}}
          privatekey: ${{ secrets.MULESOFT_GITHUBAPP_PRIVATEKEY }}

      - name: Get secrets from Azure Key Vault
        id: secrets
        uses: CoveredCA/common-devops/packages/secrets-azure@main
        with:
          keyvault-key: ${{ env.SECRETS_AZURE_KEYVAULT}}
          azure-credentials: ${{ secrets.AZURE_CREDENTIALS }}

      - name: Get service configuration
        uses: CoveredCA/common-devops/packages/configuration-service@main

      - name: Verify if the github tag exists
        if: "!contains(env.service_version, 'snapshot')"
        shell: bash
        run: |
          echo " "
          echo "***********************************************"
          echo "Verify if github tag exists "
          echo "***********************************************"
          echo " "

          tag_exist=$(git tag $service_version)
          if [ "$tag_exist" != "" ] ; then
            echo "  Error, the tag already exists in Github; bump up the application version in the POM file"
            exit 1
          else
            echo "  Create tag $service_version for the respository"
          fi
          echo " "

      - name: Install Java environment for Mulesoft Applications
        uses: CoveredCA/common-devops/packages/install-java@main

      - name: Setup Anypoint Exchange directories
        run: |
          echo " "
          echo "***********************************************"
          echo "Setup Anypoint Exchange directories"
          echo "***********************************************"
          echo " "
          echo "  Configuring the directory for Anypoint Exchange documentation"
          if [ -d "exchange-docs" ]; then
            echo "    Directory exchange-docs exists and will not be overriden with README.md" 
          else
            echo "    Creating directory 'exchange-doc' with home.md from README.md"
            mkdir -p exchange-docs
            mkdir -p exchange-docs/docs
            cp -Rfpv README.md exchange-docs/home.md
            cp -Rfpv docs/*.* exchange-docs/docs 
          fi
          echo " "
        
      - name: Compile code    
        run: mvn --batch-mode compile

      - name: Run test cases and package
        id: run-test-cases
        shell: bash
        run: |
          echo " "
          echo "***********************************************"
          echo "Run test cases and package"
          echo "***********************************************"
          echo " "
          skiptests=" "
          if [[ "${{env.configuration_skiptests}}" == "true" ]]; then
            skiptests="-DskipTests"
            echo "  Tests will be skipped"
          else
            echo "  The application will be tested"
          fi
          mvn --batch-mode $skiptests package $configuration_test_properties
          echo " "

      - name: Summary - Test
        uses: CoveredCA/common-devops/packages/summary-junit@main
        with:
          badge-label: Unit test
          badge-suffix: ut
          path-report: 'target/surefire-reports/*.xml'
          path-directoryreports: 'target/surefire-reports/*'

      - name: Summary - Code Coverage
        uses: CoveredCA/common-devops/packages/summary-codecoverage@main

      #########################################################
      # Next actions only if application is not a snapshot
      #########################################################
      
      - name: Deploy to anypoint exchange
        if: "!contains(env.service_version, 'snapshot')"
        run: |
          echo " "
          echo "***********************************************"
          echo "Deploy to Anypoint Exchange"
          echo "***********************************************"        
          echo " "
          mvn --batch-mode deploy -DskipTests
          echo " "

      - name: Tag repository with service version
        if: "!contains(env.service_version, 'snapshot')"
        shell: bash
        run: |
          echo " "
          echo "***********************************************"
          echo "Tag repository with service version "
          echo "***********************************************"
          echo " "
          git push origin $service_version
          echo " "

      - name: Create a release
        uses: ncipollo/release-action@v1
        if: "hashFiles('target/*.jar') != '' && !contains(env.service_version, 'snapshot')"
        with: 
          artifacts: "target/*.jar"
          artifactErrorsFailBuild: true
          makeLatest: true
          tag: ${{ env.service_version }}
          name: ${{ env.service_version }}

      - name: Create badge for workflow number
        uses: CoveredCA/common-devops/packages/badge@main
        if: "!contains(env.service_version, 'snapshot')"
        with:
          label: Build job
          status: '${{ github.run_number }}'
          color: '535597'
          file: ${{ env.service_name }}-wf.svg
          folder: ${{ env.service_name }}
      
      - name: Create badge release only for jar files
        uses: CoveredCA/common-devops/packages/badge@main
        if: "hashFiles('target/*.jar') != '' && !contains(env.service_version, 'snapshot')"
        with:
          label: Release
          status: '${{ env.service_version }}'
          color: '535597'
          file: ${{ env.service_name }}-re.svg
          folder: ${{ env.service_name }}

      - name: Create a deployment issue
        id: create-deployment-issue  
        if: "env.configuration_environments != '' && !contains(env.service_version, 'snapshot')"
        env:
          GITHUB_TOKEN: ${{ env.github_automationbot_token }}
        shell: bash
        run: |
          echo " "
          echo "***********************************************"
          echo "Create Deployment Issue "
          echo "***********************************************"
          echo " "
          echo "  Create issue for deployment in the first environment from list: $configuration_environments"

          # Environment list to an array
          read -a array <<< "$configuration_environments"
          echo "  Environment to deploy the application: ${array[0]}"
          gh -R "${{ github.repository }}" issue create \
              -t "Deployment ${array[0]} ${{ env.service_name }} ${{ env.service_version }}" \
              -a "${{ github.triggering_actor}}" \
              -b "${{ env.MESSAGE_SERVICE_TRIGGER_DEPLOYMENT }}" \
              -l "deployment" \
              -p "${{ env.deployment_project }}"