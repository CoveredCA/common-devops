name: Update Common Imports

on:
  workflow_call:

env:
  CONFIGURATIONS_REPOSITORY: common-configurations
  GLOBAL_CONFIGURATION: _global.yml
  SECRETS_AZURE_KEYVAULT: CoveredCA-KV-Mulesoft
  GH_TOKEN: ${{github.token}}

jobs:
  updateImports:
    runs-on: ubuntu-latest

    steps:

      - name: Get token from Github App
        id: app-token
        uses: CoveredCA/common-devops/packages/app-token@main
        with:
          client-id: ${{ secrets.MULESOFT_GITHUBAPP_CLIENTID }}
          privatekey: ${{ secrets.MULESOFT_GITHUBAPP_PRIVATEKEY }}

      - name: Get secrets from Azure Key Vault
        id: secrets
        uses: CoveredCA/common-devops/packages/secrets-azure@main
        with:
          keyvault-key: ${{ env.SECRETS_AZURE_KEYVAULT}}
          azure-credentials: ${{ secrets.AZURE_CREDENTIALS }}

      - name: Install XML Parser
        shell: bash
        run: |
          echo "  Install XMLStarlet in Ubuntu"
          sudo apt-get install xmlstarlet --fix-missing
          echo " "
          echo "  xmlstarlet --version"
          xmlstarlet --version
          echo " "

      - name: Acquire Common-Parent-Pom Latest Version
        shell: bash
        run: |
          echo " "
          echo "***************************************"
          echo "Acquiring Common-Parent-Pom latest version"
          echo "***************************************"
          echo " "
          urlconfigurationfile="https://raw.githubusercontent.com/CoveredCA/common-parent-pom/main/pom.xml"
          echo "  URL of file: $urlconfigurationfile"
          configurationdata=$(curl -sH "Authorization: token $github_automationbot_token" $urlconfigurationfile)
          echo " "
          echo $configurationdata > parent-pom.xml
          echo "  Parse parent-pom.xml"
          PARENT_POM_VERSION=$( xmlstarlet sel -N x=http://maven.apache.org/POM/4.0.0 -t -v "/x:project/x:version" parent-pom.xml )
          echo " "
          echo "  parent_pom_version: $PARENT_POM_VERSION"
          echo " "
          echo "PARENT_POM_VERSION=$PARENT_POM_VERSION" >> $GITHUB_ENV
          echo " "
          #============================================================#

      - name: Install NodeJs
        uses: actions/setup-node@v4
        with:
          node-version: 20

      - name: Install Anypoint CLI
        shell: bash
        run: |
          echo " "
          echo "***************************************"
          echo "Install Anypoint CLI"
          echo "***************************************"
          echo " "
          echo "Install anypoint-cli-v4..."
          npm install -g anypoint-cli-v4
          echo "anypoint-cli-v4 --version: "
          anypoint-cli-v4 --version
          echo " "

      - name: Acquire Common-Core Latest Version
        shell: bash
        run: |
          echo " "
          echo "***************************************"
          echo "Acquiring Common-Core latest version"
          echo "***************************************"
          COMMON_CORE_VERSION_COMMAND="anypoint-cli-v4 exchange:asset:list \
          --client_id $cicd_connectedapp_clientid \
          --client_secret $cicd_connectedapp_secret \
          --organizationId 83ce023f-20c2-40a9-abdd-efdab38b2bcf \
          --host gov.anypoint.mulesoft.com \
          --output json \
          common-core"
          echo "command used: $COMMON_CORE_VERSION_COMMAND"
          COMMON_CORE_VERSION=$($COMMON_CORE_VERSION_COMMAND | jq -r 'sort_by(.version) | map(.version) | last(.[])')
          echo " "
          echo "Common-Core version: $COMMON_CORE_VERSION"
          echo " "
          echo "COMMON_CORE_VERSION=$COMMON_CORE_VERSION" >> $GITHUB_ENV
          echo " "

      - name: Show Latest Common Imports Versions
        shell: bash
        run: |
            echo "Fetch common-parent-pom and common-core versions"
            echo " "
            echo "**************************************"
            echo "Common Core"
            echo "**************************************"
            echo " "
            echo "Common Core Version: $COMMON_CORE_VERSION"
            echo " "
            echo " "
            echo "**************************************"
            echo "Common Parent Pom"
            echo "**************************************"
            echo " "
            echo "Common Parent POM: $PARENT_POM_VERSION"
            echo " "

      - name: Repository Loop
        id: repo-loop
        shell: bash
        run: |
          echo " "
          echo -e "\n*****************************************\nAcquiring List of Repositories with tags:\n\t- mulesoft\n\t- app\n*****************************************\n "
          repos=$(gh repo list CoveredCA --topic mulesoft --topic app | awk '{print $1}' | awk -F/ '{print $2}')
          OUTPUT_SERVICE_JSON=''
          echo -e " \n***************************************\nBeginning Processing Loop\n***************************************\n "
          for repo in "${repos[@]}"; do

            echo -e " \n***************************************\n\tProcessing repository: $repo\n***************************************\n "
            echo -e "***************************************\n\tClean Repository Name\n***************************************\n "
            clean_repo=$(sed 's/-/_/g' <<< $repo)
            echo "\$clean_repo: $clean_repo"

            echo -e " \n***************************************\n\tGet and Set Service Creds\n\t\t- clientid\n\t\t- clientsecret\n\t\t- host\n***************************************\n "
            client_id=\${api_"$clean_repo"_dev_clientid}
            eval "clientid=\"$client_id\""

            client_secret=\${api_"$clean_repo"_dev_clientsecret}
            eval "clientsecret=\"$client_secret\""

            host=https://"$repo"-dev.usg-w1.gov.cloudhub.io/api/health

            [[ $RUNNER_DEBUG -eq 1 ]] && echo -e "DEBUG: \$client_id: $client_id\nDEBUG: \$clientid: $clientid\nDEBUG: \$client_secret: $client_secret\nDEBUG: \$clientsecret: $clientsecret\nDEBUG: \$host: $host\n"

            echo -e "*****************************************\n\tSend Healthcheck Request and get data\n*****************************************\n "

            payload=$(curl -s -H "Content-Type: application/json" -H "client_id: $clientid" -H "client_secret: $clientsecret" $host) || true
            [[ $RUNNER_DEBUG -eq 1 ]] && echo "DEBUG: \$payload: $payload"

            SERVICE_COMMON_PARENT_POM_VERSION=$(echo $payload | jq -r '.commonParentPom.version') || true
            SERVICE_COMMON_CORE_VERSION=$(echo $payload | jq -r '.commonCore.version') || true
            SERVICE_VERSION=$(echo $payload | jq -r '.service.version') || true

            echo "$SERVICE_COMMON_PARENT_POM_VERSION  <--  \$SERVICE_COMMON_PARENT_POM_VERSION"
            echo "$SERVICE_COMMON_CORE_VERSION  <--  \$SERVICE_COMMON_CORE_VERSION"
            echo "$SERVICE_VERSION  <--  \$SERVICE_VERSION"

            echo -e " \n**************************************\n\tRun Version Comparisons\n**************************************\n "

            if [ "$SERVICE_COMMON_PARENT_POM_VERSION" != "$PARENT_POM_VERSION" ]; then
              echo "Parent Pom Version Needs to be updated"
              echo "\$SERVICE_COMMON_PARENT_POM_VERSION  -->  \$PARENT_POM_VERSION"
              echo "$SERVICE_COMMON_PARENT_POM_VERSION  -->  $PARENT_POM_VERSION"
              update_needed=true
            fi
            echo " "
            if [ "$SERVICE_COMMON_CORE_VERSION" != "$COMMON_CORE_VERSION" ]; then
              echo "Common Core Version Needs to be updated"
              echo "\$SERVICE_COMMON_CORE_VERSION  -->  \$COMMON_CORE_VERSION"
              echo "$SERVICE_COMMON_CORE_VERSION  -->  $COMMON_CORE_VERSION"
              update_needed=true
            fi
            SERVICE_COMMON_CORE_VERSION="1.0.0" #TODO REMOVE ME
            if [ "$SERVICE_COMMON_CORE_VERSION" != "$COMMON_CORE_VERSION" ]; then #TODO REMOVE ME
              echo "Common Core Version Needs to be updated" #TODO REMOVE ME
              echo "\$SERVICE_COMMON_CORE_VERSION  -->  \$COMMON_CORE_VERSION" #TODO REMOVE ME
              echo "$SERVICE_COMMON_CORE_VERSION  -->  $COMMON_CORE_VERSION" #TODO REMOVE ME
              update_needed=true #TODO REMOVE ME
            fi #TODO REMOVE ME

            [[ "$update_needed" = "true" ]] && echo -e " \n*****************************************\n\tUpdate Version Numbers\n*****************************************\n "
            if [[ "$update_needed" = "true" ]]; then
              echo "Current Service Version: $SERVICE_VERSION"
              OLD_SERVICE_VERSION="$SERVICE_VERSION"
              if [[ "$SERVICE_VERSION" =~ "-snapshot" ]]; then
                echo "The service version already contains -snapshot."
                echo "No updating of service version required."
              else
                echo "Service Version Needs to be updated"
                echo "Incrementing version number and adding '-snapshot'"
                IFS=. read -r major minor patch <<< "$OLD_SERVICE_VERSION"
                patch=$((patch + 1))
                if ((patch > 99)); then
                  minor=$((minor + 1))
                  patch=0
                  if ((minor > 99)); then
                    major=$((major + 1))
                    minor=0
                  fi
                fi
                NEW_SERVICE_VERSION="$major.$minor.$patch-snapshot"
                echo "Original Service Version  -->  New Service Version"
                echo "$OLD_SERVICE_VERSION  -->  $NEW_SERVICE_VERSION"
                SERVICE_VERSION="$NEW_SERVICE_VERSION" # overwrite the service version so we only ever use one common variable
              fi
              echo " "
              echo "OUTPUT_SERVICE_JSON == $OUTPUT_SERVICE_JSON"
              OUTPUT_SERVICE_JSON="$OUTPUT_SERVICE_JSON{\"service\":{\"name\":\""$repo"\",\"version\":{\"old\":\""$OLD_SERVICE_VERSION"\",\"new\":\""$SERVICE_VERSION"\"},\"parent_pom\":\""$SERVICE_COMMON_PARENT_POM_VERSION"\",\"common_core\":\""$SERVICE_COMMON_CORE_VERSION"\"}},"
              echo " "
              echo "OUTPUT_SERVICE_JSON == $OUTPUT_SERVICE_JSON"
              echo " "
            fi
          done
          echo " "
          [[ ${OUTPUT_SERVICE_JSON: -1} == "," ]] && OUTPUT_SERVICE_JSON="${OUTPUT_SERVICE_JSON::-1}" # If trailing comma then delete
          OUTPUT_SERVICE_JSON="[$OUTPUT_SERVICE_JSON]" # Loop completed, wrap in json array
          echo "OUTPUT_SERVICE_JSON=$OUTPUT_SERVICE_JSON" >> $GITHUB_ENV
          echo " "
          echo "$OUTPUT_SERVICE_JSON" | jq '.'
          echo " "

      - name: Update Application Poms Loop
        id: pom-update-loop
        shell: bash
        env:
          GITHUB_TOKEN: ${{ env.github_automationbot_token }}
        run: |
          [[ $RUNNER_DEBUG -eq 1 ]] && echo -e " \ngh --version\n "
          [[ $RUNNER_DEBUG -eq 1 ]] && gh --version
          [[ $RUNNER_DEBUG -eq 1 ]] && echo -e " \ngh auth status\n "
          [[ $RUNNER_DEBUG -eq 1 ]] && gh auth status
          echo -e " \n*****************************************\nServices To Update\n*****************************************\n "
          echo "$OUTPUT_SERVICE_JSON" | jq '.'

          echo -e " \n*****************************************\nStarting Service Update Loop\n*****************************************\n "
          services=$(echo "$OUTPUT_SERVICE_JSON" | jq -c '.[]')

          echo "Setting Github Automation Credentials"
          echo "user.name: ${{ github.actor }}"
          echo "user.email: ${{ github.actor_id }}+${{ github.actor }}@users.noreply.github.com"
          git config --global user.name "${{ github.actor }}"
          git config --global user.email "${{ github.actor_id }}+${{ github.actor }}@users.noreply.github.com"

          for service in "$services"; do
            SERVICE_NAME=$(echo "$service" | jq -r '.service.name')
            OLD_SERVICE_VERSION=$(echo "$service" | jq -r '.service.version.old')
            NEW_SERVICE_VERSION=$(echo "$service" | jq -r '.service.version.new')
            SERVICE_COMMON_PARENT_POM_VERSION=$(echo "$service" | jq -r '.service.parent_pom')
            SERVICE_COMMON_CORE_VERSION=$(echo "$service" | jq -r '.service.common_core')

            # git clone https://x-access-token:${{env.GH_TOKEN}}@github.com/CoveredCA/$SERVICE_NAME.git

            git clone --filter=blob:none --no-checkout --depth 1 --branch main https://x-access-token:${{env.GH_TOKEN}}@github.com/CoveredCA/$SERVICE_NAME.git # TEST THIS NEXT
            git sparse-checkout init --cone # TEST THIS NEXT
            git sparse-checkout set pom.xml # TEST THIS NEXT
            git checkout main # TEST THIS NEXT

            echo -e " \n*****************************************\nRepo cloned, list files\n*****************************************\n "
            ls -la
            cd "$SERVICE_NAME"
            echo -e " \n*****************************************\nIn Repo Dir, list files\n*****************************************\n "
            pwd
            ls -la

            if [ -f "pom.xml" ]; then
              echo "Found pom.xml, making changes..."

              xmlstarlet ed -L -N x=http://maven.apache.org/POM/4.0.0 -u "/x:project/x:parent/x:version" -v "$COMMON_PARENT_POM_VERSION" pom.xml
              xmlstarlet ed -L -N x=http://maven.apache.org/POM/4.0.0 -u "/x:project/x:version" -v "$NEW_SERVICE_VERSION" pom.xml
              xmlstarlet ed -L -N x=http://maven.apache.org/POM/4.0.0 -u "/x:project/x:dependencies/x:dependency[x:artifactId='common-core']/x:version" -v "$COMMON_CORE_VERSION" pom.xml

              git add pom.xml
              git commit -m "🤖 Auto-Updater: Update $SERVICE_NAME to $NEW_SERVICE_VERSION
              Old Service Version  -->  New Service Version
              $OLD_SERVICE_VERSION  -->  $NEW_SERVICE_VERSION
              Reasoning:
              Service Parent Pom  --> Latest Parent Pom
              $SERVICE_COMMON_PARENT_POM_VERSION  -->  $PARENT_POM_VERSION
              Service Common Core  --> Latest Common Core
              $SERVICE_COMMON_CORE_VERSION  -->  $COMMON_CORE_VERSION
              "
              git push --force origin main



            else
              echo "Pom file not found in repository root, skipping to next repository"
              continue
            fi

            cd ..
            rm -rf "$SERVICE_NAME"
          done
