name: Update Common Imports

on:
  workflow_call:

env:
  CONFIGURATIONS_REPOSITORY: common-configurations
  GLOBAL_CONFIGURATION: _global.yml
  SECRETS_AZURE_KEYVAULT: CoveredCA-KV-Mulesoft

jobs:
  updateImports:
    runs-on: ubuntu-latest

    steps:

      - name: Get token from Github App
        id: app-token
        uses: CoveredCA/common-devops/packages/app-token@main
        with:
          client-id: ${{ secrets.MULESOFT_GITHUBAPP_CLIENTID }}
          privatekey: ${{ secrets.MULESOFT_GITHUBAPP_PRIVATEKEY }}

      - name: Get secrets from Azure Key Vault
        id: secrets
        uses: CoveredCA/common-devops/packages/secrets-azure@main
        with:
          keyvault-key: ${{ env.SECRETS_AZURE_KEYVAULT}}
          azure-credentials: ${{ secrets.AZURE_CREDENTIALS }}

      - name: Install XML Parser
        shell: bash
        run: |
          echo "  Install XMLStarlet in Ubuntu"
          sudo apt-get install xmlstarlet --fix-missing
          echo " "
          echo "  xmlstarlet --version"
          xmlstarlet --version
          echo " "

      - name: Acquire Common-Parent-Pom Latest Version
        shell: bash
        run: |
          echo " "
          echo "***************************************"
          echo "Acquiring Common-Parent-Pom latest version"
          echo "***************************************"
          echo " "
          urlconfigurationfile="https://raw.githubusercontent.com/CoveredCA/common-parent-pom/main/pom.xml"
          echo "  URL of file: $urlconfigurationfile"
          configurationdata=$(curl -sH "Authorization: token $github_automationbot_token" $urlconfigurationfile)
          echo " "
          echo $configurationdata > parent-pom.xml
          echo "  Parse parent-pom.xml"
          PARENT_POM_VERSION=$( xmlstarlet sel -N x=http://maven.apache.org/POM/4.0.0 -t -v "/x:project/x:version" parent-pom.xml )
          echo " "
          echo "  parent_pom_version: $PARENT_POM_VERSION"
          echo " "
          echo "PARENT_POM_VERSION=$PARENT_POM_VERSION" >> $GITHUB_ENV
          echo " "
          #============================================================#

      - name: Install NodeJs
        uses: actions/setup-node@v4
        with:
          node-version: 20

      - name: Install Anypoint CLI
        shell: bash
        run: |
          echo " "
          echo "***************************************"
          echo "Install Anypoint CLI"
          echo "***************************************"
          echo " "
          echo "Install anypoint-cli-v4..."
          npm install -g anypoint-cli-v4
          echo "anypoint-cli-v4 --version: "
          anypoint-cli-v4 --version
          echo " "

      - name: Acquire Common-Core Latest Version
        shell: bash
        run: |
          echo " "
          echo "***************************************"
          echo "Acquiring Common-Core latest version"
          echo "***************************************"
          COMMON_CORE_VERSION_COMMAND="anypoint-cli-v4 exchange:asset:list \
          --client_id $cicd_connectedapp_clientid \
          --client_secret $cicd_connectedapp_secret \
          --organizationId 83ce023f-20c2-40a9-abdd-efdab38b2bcf \
          --host gov.anypoint.mulesoft.com \
          --output json \
          common-core"
          echo "command used: $COMMON_CORE_VERSION_COMMAND"
          COMMON_CORE_VERSION=$($COMMON_CORE_VERSION_COMMAND | jq -r 'sort_by(.version) | map(.version) | last(.[])')
          echo " "
          echo "Common-Core version: $COMMON_CORE_VERSION"
          echo " "
          echo "COMMON_CORE_VERSION=$COMMON_CORE_VERSION" >> $GITHUB_ENV
          echo " "

      - name: Show Latest Common Imports Versions
        shell: bash
        run: |
            echo "Fetch common-parent-pom and common-core versions"
            echo " "
            echo "**************************************"
            echo "Common Core"
            echo "**************************************"
            echo " "
            echo "Common Core Version: $COMMON_CORE_VERSION"
            echo " "
            echo " "
            echo "**************************************"
            echo "Common Parent Pom"
            echo "**************************************"
            echo " "
            echo "Common Parent POM: $PARENT_POM_VERSION"
            echo " "

      - name: Repository Loop
        id: repo-loop
        shell: bash
        run: |
          echo -e " \n*****************************************\nAcquiring List of Repositories with tags:\n\t- mulesoft\n\t- app\n*****************************************\n " #TEST
          echo " "
          echo "*****************************************"
          echo "Acquiring List of Repositories with tags:"
          echo "    - mulesoft"
          echo "    - app"
          echo "*****************************************"
          echo " "
          repos=$(gh repo list CoveredCA --topic mulesoft --topic app | awk '{print $1}' | awk -F/ '{print $2}')

          echo " "
          echo "***************************************"
          echo "Beginning Processing Loop"
          echo "***************************************"
          echo " "
          # Loop through each repository
          for repo in "${repos[@]}"; do

            echo " "
            echo "***************************************"
            echo "    Processing repository: $repo"
            echo "***************************************"
            echo " "
            echo "***************************************"
            echo "    Clean Repository Name"
            echo "***************************************"
            echo " "
            clean_repo=$(sed 's/-/_/g' <<< $repo)
            echo "\$clean_repo: $clean_repo"
            # clean_repo="cca_salesforce_sapi" # TODO REMOVE ME
            # repo="cca-salesforce-sapi" # TODO REMOVE ME

            echo " "
            echo "***************************************"
            echo "    Get and Set Service Creds"
            echo "        - clientid"
            echo "        - clientsecret"
            echo "        - host"
            echo "***************************************"
            echo " "
            client_id=\${api_"$clean_repo"_dev_clientid}
            eval "clientid=\"$client_id\""

            client_secret=\${api_"$clean_repo"_dev_clientsecret}
            eval "clientsecret=\"$client_secret\""

            host=https://"$repo"-dev.usg-w1.gov.cloudhub.io/api/health

            [[ $RUNNER_DEBUG -eq 1 ]] && echo "DEBUG: \$client_id: $client_id"
            [[ $RUNNER_DEBUG -eq 1 ]] && echo "DEBUG: \$clientid: $clientid"
            [[ $RUNNER_DEBUG -eq 1 ]] && echo "DEBUG: \$client_secret: $client_secret"
            [[ $RUNNER_DEBUG -eq 1 ]] && echo "DEBUG: \$clientsecret: $clientsecret"
            [[ $RUNNER_DEBUG -eq 1 ]] && echo "DEBUG: \$host: $host"
            [[ $RUNNER_DEBUG -eq 1 ]] && echo " "

            echo "*****************************************"
            echo "    Send Healthcheck Request and get data"
            echo "*****************************************"
            echo " "

            payload=$(curl -s -H "Content-Type: application/json" -H "client_id: $clientid" -H "client_secret: $clientsecret" $host) || true
            [[ $RUNNER_DEBUG -eq 1 ]] && echo "DEBUG: \$payload: $payload"

            SERVICE_COMMON_PARENT_POM_VERSION=$(echo $payload | jq -r '.commonParentPom.version') || true
            SERVICE_COMMON_CORE_VERSION=$(echo $payload | jq -r '.commonCore.version') || true
            SERVICE_VERSION=$(echo $payload | jq -r '.service.version') || true

            echo "$SERVICE_COMMON_PARENT_POM_VERSION  <--  \$SERVICE_COMMON_PARENT_POM_VERSION"
            echo "$SERVICE_COMMON_CORE_VERSION  <--  \$SERVICE_COMMON_CORE_VERSION"
            echo "$SERVICE_VERSION  <--  \$SERVICE_VERSION"

            echo " "
            echo "**************************************"
            echo "    Run Version Comparisons"
            echo "**************************************"
            echo " "

            if [ "$SERVICE_COMMON_PARENT_POM_VERSION" != "$PARENT_POM_VERSION" ]; then
              echo "Parent Pom Version Needs to be updated"
              echo "\$SERVICE_COMMON_PARENT_POM_VERSION  -->  \$PARENT_POM_VERSION"
              echo "$SERVICE_COMMON_PARENT_POM_VERSION  -->  $PARENT_POM_VERSION"
              update_needed=true
            fi
            echo " "
            if [ "$SERVICE_COMMON_CORE_VERSION" != "$COMMON_CORE_VERSION" ]; then
              echo "Common Core Version Needs to be updated"
              echo "\$SERVICE_COMMON_CORE_VERSION  -->  \$COMMON_CORE_VERSION"
              echo "$SERVICE_COMMON_CORE_VERSION  -->  $COMMON_CORE_VERSION"
              update_needed=true
            fi
            SERVICE_COMMON_CORE_VERSION="1.0.0" #TODO REMOVE ME
            if [ "$SERVICE_COMMON_CORE_VERSION" != "$COMMON_CORE_VERSION" ]; then #TODO REMOVE ME
              echo "Common Core Version Needs to be updated" #TODO REMOVE ME
              echo "\$SERVICE_COMMON_CORE_VERSION  -->  \$COMMON_CORE_VERSION" #TODO REMOVE ME
              echo "$SERVICE_COMMON_CORE_VERSION  -->  $COMMON_CORE_VERSION" #TODO REMOVE ME
              update_needed=true #TODO REMOVE ME
            fi #TODO REMOVE ME

            [[ "$update_needed" = "true" ]] && echo " "
            [[ "$update_needed" = "true" ]] && echo "*****************************************"
            [[ "$update_needed" = "true" ]] && echo "    Update Version Numbers"
            [[ "$update_needed" = "true" ]] && echo "*****************************************"
            [[ "$update_needed" = "true" ]] && echo " "
            #SERVICE_VERSION="1.0.45-snapshot" #TODO REMOVE ME
            if [[ "$update_needed" = "true" ]]; then
              echo "Current Service Version: $SERVICE_VERSION"
              if [[ $SERVICE_VERSION =~ "-snapshot" ]]; then
                echo "The service version already contains -snapshot."
                echo "No updating of service version required."
              else
                echo "Service Version Needs to be updated"
                echo "Incrementing version number and adding '-snapshot'"
                IFS=. read -r major minor patch <<< "$SERVICE_VERSION" # Split the version into components
                patch=$((patch + 1)) # Increment the patch version
                if ((patch > 99)); then # Check if patch version exceeds 99
                  minor=$((minor + 1)) # Increment minor version
                  patch=0 # Reset patch version to 0
                  if ((minor > 99)); then # Check if minor version exceeds 99
                    major=$((major + 1)) # Increment major version
                    minor=0 # Reset minor version to 0
                  fi
                fi
                # Display the original and new version
                echo "Original Service Version  -->  New Service Version"
                echo "$NEW_SERVICE_VERSION  -->  $new_version"
                $NEW_SERVICE_VERSION="$major.$minor.$patch-snapshot" # Reconstruct the new version string
              fi
            fi

            echo "<++> LEFT OFF HERE"

            # # Fetch pom.xml content from the repository
            # pom_content=$(curl -s -H "Authorization: Bearer ${{ secrets.GITHUB_TOKEN }}" https://raw.githubusercontent.com/CoveredCA/$repo/refs/heads/main/pom.xml)

            # # Extract versions from the repository's pom.xml
            # app_version=$(echo "$pom_content" | xmlstarlet sel -N x=http://maven.apache.org/POM/4.0.0 -t -v "/x:project/x:version")
            # parent_pom_version_app=$(echo "$pom_content" | xmlstarlet sel -N x=http://maven.apache.org/POM/4.0.0 -t -v "/x:project/x:parent/x:version")
            # common_core_version_app=$(echo "$pom_content" | xmlstarlet sel -N x=http://maven.apache.org/POM/4.0.0 -t -v "/x:project/x:dependencies/x:dependency[x:artifactId='common-core']/x:version")

            # echo "Application Version: $app_version"
            # echo "Application Parent POM Version: $parent_pom_version_app"
            # echo "Application Common Core Version: $common_core_version_app"
          done

          # echo "Matched repositories:"
          # echo "$matched_repos"
          # echo "::set-output name=repos::$matched_repos"


            # echo " "
            # echo "***************************************"
            # echo "    Send Healthcheck Request and get data"
            # echo "***************************************"
            # echo " "