name: Update Common Imports

on:
  workflow_call:

env:
  CONFIGURATIONS_REPOSITORY: common-configurations
  GLOBAL_CONFIGURATION: _global.yml
  SECRETS_AZURE_KEYVAULT: CoveredCA-KV-Mulesoft
  GH_TOKEN: ${{github.token}}

jobs:
  updateImports:
    runs-on: ubuntu-latest

    steps:

      - name: Get token from Github App
        id: app-token
        uses: CoveredCA/common-devops/packages/app-token@main
        with:
          client-id: ${{ secrets.MULESOFT_GITHUBAPP_CLIENTID }}
          privatekey: ${{ secrets.MULESOFT_GITHUBAPP_PRIVATEKEY }}

      - name: Get secrets from Azure Key Vault
        id: secrets
        uses: CoveredCA/common-devops/packages/secrets-azure@main
        with:
          keyvault-key: ${{ env.SECRETS_AZURE_KEYVAULT}}
          azure-credentials: ${{ secrets.AZURE_CREDENTIALS }}

      - name: Install XML Parser
        shell: bash
        run: |
          echo "  Install XMLStarlet in Ubuntu"
          sudo apt-get install xmlstarlet --fix-missing
          echo " "
          echo "  xmlstarlet --version"
          xmlstarlet --version
          echo " "

      - name: Acquire Common-Parent-Pom Latest Version
        shell: bash
        run: |
          echo " "
          echo "***************************************"
          echo "Acquiring Common-Parent-Pom latest version"
          echo "***************************************"
          echo " "
          urlconfigurationfile="https://raw.githubusercontent.com/CoveredCA/common-parent-pom/main/pom.xml"
          echo "  URL of file: $urlconfigurationfile"
          configurationdata=$(curl -sH "Authorization: token $github_automationbot_token" $urlconfigurationfile)
          echo " "
          echo $configurationdata > parent-pom.xml
          echo "  Parse parent-pom.xml"
          PARENT_POM_VERSION=$( xmlstarlet sel -N x=http://maven.apache.org/POM/4.0.0 -t -v "/x:project/x:version" parent-pom.xml )
          echo " "
          echo "  parent_pom_version: $PARENT_POM_VERSION"
          echo " "
          echo "PARENT_POM_VERSION=$PARENT_POM_VERSION" >> $GITHUB_ENV
          echo " "
          #============================================================#

      - name: Acquire Common-Core Latest Version
        shell: bash
        env:
          GITHUB_TOKEN: ${{ env.github_automationbot_token }}
        run: |
          echo " "
          echo -e " \n*****************************************\nSetting Github Automation Credentials\n*****************************************\n "
          echo "user.name: ${{ github.actor }}"
          echo "user.email: ${{ github.actor_id }}+${{ github.actor }}@users.noreply.github.com"
          git config --global user.name "${{ github.actor }}"
          git config --global user.email "${{ github.actor_id }}+${{ github.actor }}@users.noreply.github.com"
          echo -e " \n*****************************************\nClone the Repo\n*****************************************\n "
          SERVICE_NAME=common-core
          git clone --filter=blob:none --depth 1 --branch main "https://x-access-token:${{env.GH_TOKEN}}@github.com/CoveredCA/$SERVICE_NAME.git"
          echo -e " \n*****************************************\nRepo cloned, list files\n*****************************************\n "
          ls -la &&
          cd "$SERVICE_NAME"
          echo -e " \n*****************************************\nIn Repo Dir, list files\n*****************************************\n "
          pwd && ls -la
          echo -e " \n*****************************************\nGrab Version of Common Core\n*****************************************\n "
          COMMON_CORE_VERSION=$(xmlstarlet sel -N x=http://maven.apache.org/POM/4.0.0 -t -v "/x:project/x:version" pom.xml)

          if [[ "$COMMON_CORE_VERSION" =~ "-snapshot" ]]; then
            echo -e " \n*****************************************\nDecrementing Common Core Due To '-snapshot' Version Present\n*****************************************\n "
            OLD_COMMON_CORE_VERSION="$(sed 's/-snapshot//g' <<< $COMMON_CORE_VERSION)"
            IFS=. read -r major minor patch <<< "$OLD_COMMON_CORE_VERSION"
            patch=$((patch - 1))
            if ((patch < 0)); then
              minor=$((minor - 1))
              patch=99
              if ((minor < 0)); then
                major=$((major - 1))
                minor=99
              fi
            fi
            NEW_COMMON_CORE_VERSION="$major.$minor.$patch"
            echo -e "Original Service Version  -->  New Service Version\n$COMMON_CORE_VERSION  -->  $NEW_COMMON_CORE_VERSION"
          fi
          echo " "
          echo "Common-Core version: $COMMON_CORE_VERSION"
          echo " "
          echo "COMMON_CORE_VERSION=$COMMON_CORE_VERSION" >> $GITHUB_ENV
          echo " "
          cd .. && rm -rf "$SERVICE_NAME"

      - name: Repository Loop
        shell: bash
        env:
          GITHUB_TOKEN: ${{ env.github_automationbot_token }}
        run: |
          echo " "
          echo -e "\n*****************************************\nAcquiring List of Repositories with tags:\n\t- mulesoft\n\t- app\n*****************************************\n "
          repos=$(gh repo list CoveredCA --topic mulesoft --topic app | awk '{print $1}' | awk -F/ '{print $2}')
          echo "$repos"
          echo -e "\n*****************************************\nSetting Github Automation Credentials\n*****************************************\n "
          [[ $RUNNER_DEBUG -eq 1 ]] && echo "user.name: ${{ github.actor }}"
          [[ $RUNNER_DEBUG -eq 1 ]] && echo "user.email: ${{ github.actor_id }}+${{ github.actor }}@users.noreply.github.com"
          git config --global user.name "${{ github.actor }}"
          git config --global user.email "${{ github.actor_id }}+${{ github.actor }}@users.noreply.github.com"
          echo -e " \n***************************************\nBeginning Processing Loop\n***************************************\n "

          for repo in $(gh repo list CoveredCA --json name --topic mulesoft --topic app | jq -r '.[].name'); do
            SERVICE_NAME="$repo"

            echo -e " \n*****************************************\nClone the Repo\n*****************************************\n "
            git clone --filter=blob:none --depth 1 --branch main "https://x-access-token:${{env.GH_TOKEN}}@github.com/CoveredCA/$SERVICE_NAME.git"

            [[ $RUNNER_DEBUG -eq 1 ]] && echo -e " \n*****************************************\nRepo cloned, list files\n*****************************************\n "
            [[ $RUNNER_DEBUG -eq 1 ]] && ls -la
            cd "$SERVICE_NAME"

            [[ $RUNNER_DEBUG -eq 1 ]] && echo -e " \n*****************************************\nIn Repo Dir, list files\n*****************************************\n "
            [[ $RUNNER_DEBUG -eq 1 ]] && pwd && ls -la

            echo -e " \n*****************************************\nGrab Versions of Current App Dependencies\n*****************************************\n "
            SERVICE_VERSION=$(xmlstarlet sel -N x=http://maven.apache.org/POM/4.0.0 -t -v "/x:project/x:version" pom.xml)
            SERVICE_COMMON_PARENT_POM_VERSION=$(xmlstarlet sel -N x=http://maven.apache.org/POM/4.0.0 -t -v "/x:project/x:parent/x:version" pom.xml)
            if [[ "$SERVICE_NAME" = "common-core" ]]; then
              # If it's common-core then it doesnt have a dependency of itself so then we set it equal to itself to essentially ignore during the check
              SERVICE_COMMON_CORE_VERSION=$COMMON_CORE_VERSION
            else
              SERVICE_COMMON_CORE_VERSION=$(xmlstarlet sel -N x=http://maven.apache.org/POM/4.0.0 -t -v "/x:project/x:dependencies/x:dependency[x:artifactId='common-core']/x:version" pom.xml)
            fi
            echo -e "\nSERVICE_NAME: $SERVICE_NAME\nSERVICE_VERSION: $SERVICE_VERSION\nSERVICE_COMMON_PARENT_POM_VERSION: $SERVICE_COMMON_PARENT_POM_VERSION\nSERVICE_COMMON_CORE_VERSION: $SERVICE_COMMON_CORE_VERSION\n"

            echo -e " \n*****************************************\nTest if Updates are Needed\n*****************************************\n "
            update_needed=false
            echo '[[ "$SERVICE_COMMON_PARENT_POM_VERSION" != "$PARENT_POM_VERSION" || "$SERVICE_COMMON_CORE_VERSION" != "$COMMON_CORE_VERSION" ]] && update_needed=true'
            [[ "$SERVICE_COMMON_PARENT_POM_VERSION" != "$PARENT_POM_VERSION" || "$SERVICE_COMMON_CORE_VERSION" != "$COMMON_CORE_VERSION" ]] && update_needed=true
            [[ "$update_needed" = "true" ]] && echo -e " \n*****************************************\n\tUpdate is Needed\n*****************************************\n "

            if [[ "$update_needed" = "true" ]]; then
              echo "Current Service Version: $SERVICE_VERSION"
              OLD_SERVICE_VERSION="$SERVICE_VERSION"
              if [[ "$SERVICE_VERSION" =~ "-snapshot" ]]; then
                echo -e "The service version already contains -snapshot.\nNo updating of service version required."
                NEW_SERVICE_VERSION="$SERVICE_VERSION"
              else
                echo "Service Version Needs to be updated"
                echo "Incrementing version number and adding '-snapshot'"
                IFS=. read -r major minor patch <<< "$OLD_SERVICE_VERSION"
                patch=$((patch + 1))
                if ((patch > 99)); then
                  minor=$((minor + 1))
                  patch=0
                  if ((minor > 99)); then
                    major=$((major + 1))
                    minor=0
                  fi
                fi
                NEW_SERVICE_VERSION="$major.$minor.$patch-snapshot"
                echo "Original Service Version  -->  New Service Version"
                echo "$OLD_SERVICE_VERSION  -->  $NEW_SERVICE_VERSION"
              fi
            fi
            if [[ "$update_needed" = "true" ]]; then
              echo -e " \n*****************************************\nUpdate Pom.xml if Present\n*****************************************\n "
              if [[ -f "pom.xml" ]]; then
                echo -e " \n*****************************************\nFound pom.xml, making changes...\n*****************************************\n "

                xmlstarlet ed -L -N x=http://maven.apache.org/POM/4.0.0 -u "/x:project/x:parent/x:version" -v "$PARENT_POM_VERSION" pom.xml
                xmlstarlet ed -L -N x=http://maven.apache.org/POM/4.0.0 -u "/x:project/x:version" -v "$NEW_SERVICE_VERSION" pom.xml
                [[ "$SERVICE_NAME" != "common-core" ]] && xmlstarlet ed -L -N x=http://maven.apache.org/POM/4.0.0 -u "/x:project/x:dependencies/x:dependency[x:artifactId='common-core']/x:version" -v "$COMMON_CORE_VERSION" pom.xml

                echo -e " \n*****************************************\nChange Summary:\n*****************************************\n "
                echo -e "Update $SERVICE_NAME to $NEW_SERVICE_VERSION\nOld Service Version  -->  New Service Version\n$OLD_SERVICE_VERSION  -->  $NEW_SERVICE_VERSION\nReasoning:\nService Parent Pom  --> Latest Parent Pom\n$SERVICE_COMMON_PARENT_POM_VERSION  -->  $PARENT_POM_VERSION\nService Common Core  --> Latest Common Core\n$SERVICE_COMMON_CORE_VERSION  -->  $COMMON_CORE_VERSION\n"
                echo -e " \n*****************************************\nCommitting Change To Repository\n*****************************************\n "

                git add pom.xml
                git commit -m "🤖 Auto-Updater: Update $SERVICE_NAME to $NEW_SERVICE_VERSION
                Old Service Version  -->  New Service Version
                $OLD_SERVICE_VERSION  -->  $NEW_SERVICE_VERSION
                Reasoning:
                Service Parent Pom  --> Latest Parent Pom
                $SERVICE_COMMON_PARENT_POM_VERSION  -->  $PARENT_POM_VERSION
                Service Common Core  --> Latest Common Core
                $SERVICE_COMMON_CORE_VERSION  -->  $COMMON_CORE_VERSION
                "
                git push --force origin main
              else
                echo "Pom file not found in repository root, skipping to next repository"
              fi
            else
              echo -e " \n*****************************************\nUpdate Not Needed Continuing On\n*****************************************\n "
            fi
            cd .. && rm -rf "$SERVICE_NAME"
            echo "********************************************************************************************************************************************************************"
          done
