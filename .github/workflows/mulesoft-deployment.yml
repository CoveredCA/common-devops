##########################################################################
# CICD Pipeline
##########################################################################

# Configuration for this template:
# 1.- Replace the predefined repository jpontdia/common-devops with your own.
# 2.- Update the global environment variables for the script 

name: deployment
on:
  workflow_call:
    inputs:
      keyvault-key:
        required: true
        description: Access key to KeyVault
        type: string
    secrets:
      azure-credentials:
        required: true
        description: Azure Credentials for login
env:
  GITHUB_ORGANIZATION: jpontdia
  CONFIGURATIONS_REPOSITORY: common-configurations
  DEPLOYMENT_FORWARD_LABEL: deployment-forward
  MESSAGE_ASSET_NOT_CONFIGURED: "The mulesoft asset doesn't have any deployment configuration"
  MESSAGE_SERVICE_NOT_DEPLOYED: "The service couldn't be deployed"
  MESSAGE_SERVICE_SUCCESS_DEPLOYED: "The service was successfully deployed"

jobs:

  release:
    if: github.actor == 'jpontdia' || github.actor == 'GitHubActions'
    name: deployment
    runs-on: ubuntu-latest
    steps:

      - name: Get the release metadata
        env:
          GITHUB_CONTEXT: ${{ toJson(github) }}      
        shell: bash
        run: |
          echo " "
          echo "***********************************************"
          echo "Get the release metadata "
          echo "***********************************************"
          echo "Values from github context: "
          echo "  Issue number: ${{ github.event.issue.number}}"
          echo "  Title: ${{ github.event.issue.title}}"
          echo '  Labels: ${{ toJson(github.event.issue.labels) }}'
          echo "  Repository: ${{ github.repository }}"
          echo " "
          line=$(echo "${{ github.event.issue.title}}")
          action="$(cut -d' ' -f1 <<<$line)"
          deployment_environment="$(cut -d' ' -f2 <<< $line)"
          service="$(cut -d' ' -f3 <<< $line)"
          version="$(cut -d' ' -f4 <<< $line)"
          echo "Values from issue title:"
          echo "  Action: $action"
          echo "  Environment: $deployment_environment"
          echo "  Service: $service"
          echo "  Version: $version"
          echo "deployment_environment=$deployment_environment" >> $GITHUB_ENV
          echo "deployment_version=$version" >> $GITHUB_ENV
          echo "deployment_service=$service" >> $GITHUB_ENV

      - name: Get the source code
        uses: actions/checkout@v4
        with:
          ref: '${{env.deployment_version}}'

      - name: Debug - Review the source code
        shell: bash
        run: |
          echo " "
          echo "***********************************************"
          echo "Debug - Review the source code "
          echo "***********************************************"
          echo " "
          cat pom.xml

      - name: Get global configuration for the pipeline
        uses: jpontdia/common-devops/packages/configuration-service@main
        with:
          keyvault-key: ${{ inputs.keyvault-key }}
          azure-credentials: ${{ secrets.azure-credentials }}
          github-organization: ${{ env.GITHUB_ORGANIZATION }}
          configurations-repository: ${{ env.CONFIGURATIONS_REPOSITORY }}
          environment: "${{ env.deployment_environment }}"

      - id: verify-deployment
        name: Verify if asset has the deployment configuration
        shell: bash
        run: |
          echo " "
          echo "*****************************************************"
          echo "Verify deployment to ${{ env.deployment_environment }} "
          echo "*****************************************************"
          echo " "      
          echo "dev cloudhub: ${{ env.configuration_cloudhub }}"
          if [ "${{ env.configuration_cloudhub }}" != "" ] ; then
            echo "deployment=true" >> $GITHUB_OUTPUT
            echo "The service has the configuration to be deployed in ${{ env.deployment_environment }} environment"
            echo
          else
            echo "deployment=false" >> $GITHUB_OUTPUT
            issue_message="${{env.MESSAGE_ASSET_NOT_CONFIGURED}}"
            echo "$issue_message"
            echo "issue_message=$issue_message" >> $GITHUB_ENV
          fi

      - id: issue-close
        name: Close issue
        if: steps.verify-deployment.outputs.deployment == 'false'
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          ISSUE: ${{ github.event.issue.html_url }}
        shell: bash
        run: |
          echo " "
          echo "***********************************************"
          echo "Update Issue: ${{ github.event.issue.number }} "
          echo "***********************************************"
          echo " "
          gh issue close ${{ github.event.issue.number }} \
            -c "$issue_message" \
            -r "not planned"
          
      - name: Get jar file
        uses: dsaltares/fetch-gh-release-asset@master
        if: steps.verify-deployment.outputs.deployment == 'true'
        with:
          repo: '${{ github.repository }}'
          version: 'tags/${{ env.deployment_version }}'
          regex: true
          file: "${{ env.deployment_service }}-.*\\.jar"
          token: ${{ secrets.GITHUB_TOKEN }}

      - id: deployment-ch1
        name: Deploy the service in the cloud
        uses: jpontdia/common-devops/packages/process-deployment-ch1@main
        with:
          keyvault-key: ${{ inputs.keyvault-key }}
          azure-credentials: ${{ secrets.azure-credentials }}
          github-organization: ${{ env.GITHUB_ORGANIZATION }}
          configurations-repository: ${{ env.CONFIGURATIONS_REPOSITORY }}
          deployment-env: ${{ env.deployment_environment }}

      - id: issue-close-deployment
        name: Close issue error on deployment
        if: steps.deployment-ch1.outputs.outcome == 'failure'
        continue-on-error: true
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          ISSUE: ${{ github.event.issue.html_url }}
        shell: bash
        run: |
          echo " "
          echo "***********************************************"
          echo "Update Issue: ${{ github.event.issue.number }} "
          echo "***********************************************"
          echo " "
          gh issue close ${{ github.event.issue.number }} \
            -c "${{ env.MESSAGE_SERVICE_NOT_DEPLOYED }}" \
            -r "not planned"

      - name: Execute Mulesoft BAT
        uses: jpontdia/common-devops/packages/process-bat@main
        with:
          keyvault-key: ${{ inputs.keyvault-key }}
          azure-credentials: ${{ secrets.azure-credentials }}
          github-organization: ${{ env.GITHUB_ORGANIZATION }}
          configurations-repository: ${{ env.CONFIGURATIONS_REPOSITORY }}
          deployment-env: ${{ env.deployment_environment }}

      - id: issue-close-success
        name: Close issue success
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          ISSUE: ${{ github.event.issue.html_url }}
        shell: bash
        run: |
          echo " "
          echo "***********************************************"
          echo "Update Issue: ${{ github.event.issue.number }} "
          echo "***********************************************"
          echo " "
          gh issue close ${{ github.event.issue.number }} \
            -c "${{ env.MESSAGE_SERVICE_SUCCESS_DEPLOYED }}" \
            -r "completed"

      - name: Create badge for deployment
        uses: jpontdia/common-devops/packages/build-badge@main
        with:
          github-organization: ${{ env.GITHUB_ORGANIZATION }}
          gist-id: ${{ env.github_gist_id }}
          gist-token: ${{ env.github_gist_accesstoken }}
          label: 'Deployment ${{ env.deployment_environment }}'
          status: '${{ env.deployment_version }}'
          color: '535597'
          file: ${{ env.service_name }}-${{ env.deployment_environment }}.svg