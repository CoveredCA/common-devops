##########################################################################
# CICD Pipeline
##########################################################################

# Configuration for this template:
# 1.- Replace the predefined repository jpontdia/mule-common-devops with your own.
# 2.- Update the global environment variables for the script 

name: Mulesoft
on:
  workflow_call:
    inputs:
      keyvault-key:
        required: true
        description: Access key to KeyVault
        type: string
    secrets:
      azure-credentials:
        required: true
        description: Azure Credentials for login
      gist-accesstoken:
        required: false
        description: Github Gist personal access token
env:
  DEFAULT_SETTINGS_XML: settings.xml
  GITHUB_ORGANIZATION: jpontdia
  CONFIGURATIONS_REPOSITORY: mulesoft-configurations
  GIST_ID: ef8cdef1ff940eac4d8716f6361d2363
jobs:

  ##########################################################################
  # BUILD MULESOFT SERVICE
  ##########################################################################

  build:
    name: Build
    runs-on: ubuntu-latest
    # Needed by the Unit Test Action
    permissions:
      contents: read
      issues: read
      checks: write
      pull-requests: write    
    outputs:
      # Indicates if the service is deployable
      deployment-dev: ${{ steps.verify-deployment-dev.outputs.deployment }}
      deployment-tst: ${{ steps.verify-deployment-tst.outputs.deployment }}
    steps:

      - name: Get the source code
        uses: actions/checkout@v3

      - name: Install Java JDK for Mulesoft Applications
        uses: jpontdia/mule-common-devops/packages/install-mulesoft-java@main

      - name: Get default secrets for the pipeline
        uses: jpontdia/mule-common-devops/packages/secrets@main
        with:
          keyvault-key: ${{ inputs.keyvault-key }}
          azure-credentials: ${{ secrets.azure-credentials }}
          github-organization: $GITHUB_ORGANIZATION
          configurations-repository: $CONFIGURATIONS_REPOSITORY

      - name: Settings file for maven
        uses: jpontdia/mule-common-devops/packages/settings-maven@main
        with:
          github-configurations-accesstoken: $github_configurations_accesstoken
          default-settings-xml: $DEFAULT_SETTINGS_XML
          github-organization: $GITHUB_ORGANIZATION
          configurations-repository: $CONFIGURATIONS_REPOSITORY
          
      - name: Documentation - Anypoint Exchange
        run: |
          if [ -d "exchange-docs" ] 
            then
              echo "Directory exchange-docs exists and will not be overriden with README.md" 
            else
              mkdir -p exchange-docs
              mkdir -p exchange-docs/docs
              cp -Rfpv README.md exchange-docs/home.md
              cp -Rfpv docs/*.* exchange-docs/docs 
            fi
        
      - name: Compile code
        #if: ${{ false }}    
        run: mvn --batch-mode compile
  
      - name: Run test cases and package asset
        uses: jpontdia/mule-common-devops/packages/package@main
        with:
          github-organization: $GITHUB_ORGANIZATION
          configurations-repository: $CONFIGURATIONS_REPOSITORY
          github-configurations-accesstoken: $github_configurations_accesstoken

      - name: Summary - Unit test cases
        uses: jpontdia/mule-common-devops/packages/summary-testcases@main
        with:
          gist-token: ${{ secrets.gist-accesstoken }}
          github-organization: ${{ env.GITHUB_ORGANIZATION }}
          badge-gist-id: ${{ env.GIST_ID }}
          debug: "false"

      - name: Summary - Code coverage
        uses: jpontdia/mule-common-devops/packages/summary-codecoverage@main
        with:
          gist-token: ${{ secrets.gist-accesstoken }}
          github-organization: ${{ env.GITHUB_ORGANIZATION }}
          badge-gist-id: ${{ env.GIST_ID }}

      - name: Deploy to anypoint exchange
        #if: ${{ false }}    
        run: |
          ## Deploy to anypoint exchange
          mvn --batch-mode deploy -DskipTests 

      - name: Publish - Application Coverage Report
        #if: ${{ false }}
        if: ${{ hashFiles('target/site/munit/coverage/*') != '' }}
        uses: actions/upload-artifact@master
        with:
          name: munit-application-coverage-report
          path: target/site/munit/coverage/*
      
      - name: Publish - MUnit Report
        #if: ${{ false }}
        if: ${{ hashFiles('target/surefire-reports/*') != '' }}
        uses: actions/upload-artifact@master
        with:
          name: munit-test-report
          path: target/surefire-reports/*

      - name: Publish - JAR 
        uses: actions/upload-artifact@master
        if: ${{ hashFiles('target/*.jar') != '' }}
        with:
          name: jar
          path: target/*.jar

      - name: Publish - POM 
        uses: actions/upload-artifact@master
        with:
          name: pom
          path: pom.xml
          
      - id: verify-deployment-dev
        name: Verify if asset is deployable in dev
        uses: jpontdia/mule-common-devops/packages/verify-deployment@main
        with:
          github-configurations-accesstoken: $github_configurations_accesstoken
          environment: dev
          github-organization: $GITHUB_ORGANIZATION
          configurations-repository: $CONFIGURATIONS_REPOSITORY
  
      - id: verify-deployment-tst
        name: Verify if asset is deployable in tst
        uses: jpontdia/mule-common-devops/packages/verify-deployment@main
        with:
          github-configurations-accesstoken: $github_configurations_accesstoken
          environment: tst
          github-organization: $GITHUB_ORGANIZATION
          configurations-repository: $CONFIGURATIONS_REPOSITORY

  ##########################################################################
  # DEPLOYMENT TO DEV
  ##########################################################################
  
  deploy-dev:
    if: needs.build.outputs.deployment-dev == 'true'
    name: DEV
    needs: [build]
    runs-on: ubuntu-latest
    environment:
      name: dev
    steps:

      - name: Deploy the service in the cloud
        uses: jpontdia/mule-common-devops/packages/cloudhub-deployment@main
        with:
          keyvault-key: ${{ inputs.keyvault-key }}
          azure-credentials: ${{ secrets.azure-credentials }}
          github-organization: $GITHUB_ORGANIZATION
          configurations-repository: $CONFIGURATIONS_REPOSITORY
          deployment-env: dev


  ##########################################################################
  # INTEGRATION TESTING - DEVELOPMENT
  ##########################################################################

  testing-dev:
    name: DEV Test
    needs: [deploy-dev]
    runs-on: ubuntu-latest
    steps:
      - name: Get the source code
        uses: actions/checkout@v3

      - name: Verify if running test
        id: verify-testing
        run: |
          if [ -d "bat" ]; then
            # BAT script exist, the complete action will be executed
            echo "SKIP_TEST=false" >> $GITHUB_OUTPUT
          else
            # Integration testing doesnÂ´t exist
            echo "SKIP_TEST=true" >> $GITHUB_OUTPUT
          fi

      - name: Install API Functional Monitoring
        if: steps.verify-testing.outputs.SKIP_TEST == 'false'
        run: |
          curl -o- 'https://s3.amazonaws.com/bat-wrapper/install.sh' | bash
          echo "bat -version: $(bat -version)"

      - name: Run tests
        if: steps.verify-testing.outputs.SKIP_TEST == 'false'
        run: |
          cd bat
          mkdir target
          bat

      - name: Publish - Test reports
        if: always() && steps.verify-testing.outputs.SKIP_TEST == 'false'
        uses: actions/upload-artifact@master
        with:
            name: dev-testing-reports
            path: bat/target/*.*

      - name: Job summary with test results
        uses: EnricoMi/publish-unit-test-result-action@v2.7.0
        if: always() && steps.verify-testing.outputs.SKIP_TEST == 'false'
        with:
          files: |
            bat/target/JUnit.xml
          check_name: Dev Integration Test

  ##########################################################################
  # TESTING ENVIRONMENT
  ##########################################################################
  
  deploy-tst:
    if: needs.build.outputs.deployment-tst == 'true'
    name: TST
    needs: [testing-dev]
    runs-on: ubuntu-latest
    environment:
      name: tst
    steps:

      - name: Deploy the service in the cloud
        uses: jpontdia/mule-common-devops/packages/cloudhub-deployment@main
        with:
          keyvault-key: ${{ inputs.keyvault-key }}
          azure-credentials: ${{ secrets.azure-credentials }}
          github-organization: $GITHUB_ORGANIZATION
          configurations-repository: $CONFIGURATIONS_REPOSITORY
          deployment-env: tst
