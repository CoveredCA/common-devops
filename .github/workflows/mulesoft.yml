name: Mule
on:
  workflow_call:
    inputs:
      keyvault-key:
        required: true
        description: Access key to KeyVault
        type: string
    secrets:
      azure-credentials:
        required: true
        description: Azure Credentials for login
env:
  DEFAULT_SETTINGS_XML: settings.xml

jobs:

  ##########################################################################
  # BUILD MULESOFT SERVICE
  ##########################################################################

  build:
    name: Build
    runs-on: ubuntu-latest
    outputs:
      # Indicates if the service will be deployed to development environment
      deployment: ${{ steps.verify-deployment.outputs.deployment }}
    steps:

      - name: Get the source code
        uses: actions/checkout@v3

      - name: Cache local Maven repository
        uses: actions/cache@v3
        with:
          path: ~/.m2/repository
          key: ${{ runner.os }}-maven-${{ hashFiles('**/pom.xml') }}
          restore-keys: |
            ${{ runner.os }}-maven-
                
      - name: Setup JDK 8
        uses: actions/setup-java@v3
        with:
          java-version: '8'
          distribution: 'temurin'
          #check-latest: true
          cache: 'maven'

      - name: Get default secrets for the pipeline
        uses: jpontdia/devops-pipelines/packages/get-secrets@main
        with:
          keyvault-key: jpworks-keyvault
          azure-credentials: ${{ secrets.azure-credentials }}

      - name: Get the settings file for maven
        uses: jpontdia/devops-pipelines/packages/settings-maven@main
        with:
          configuration-access-token: $configuration_access_token
          default-settings-xml: $DEFAULT_SETTINGS_XML 

      - id: configuration-tests
        name: Get configuration file for test cases
        uses: jpontdia/devops-pipelines/packages/configuration-file@main
        with:
          configuration-access-token: $configuration_access_token
          yaml-path: ".test-properties"
          
      - name: Copy Anypoint Exchange documentation
        run: |
          cp -Rfpv README.md exchange-docs/home.md
          cp -Rfpv docs/*.* exchange-docs/docs/*.* 
      
      - name: DEBUG - Show settings file
        run: |
          ls -la $HOME
          cat $HOME/.m2/settings.xml
          echo "Github run number: ${{ github.run_number }}"
          echo "testing: ${{ steps.configuration-tests.outputs.configuration-data }}"
          ## Get the git commit hash 
          commitHash=$(git rev-parse --short "$GITHUB_SHA")
          echo "Github commit hash: $commitHash"

      - name: Compile code
        #if: ${{ false }}    
        run: mvn --batch-mode compile
  
      - name: Run test cases and package
        run: mvn --batch-mode package ${{ steps.configuration-tests.outputs.configuration-data }}

      - name: Deploy to anypoint exchange
        #if: ${{ false }}    
        run: |
          ## Deploy to anypoint exchange
          mvn --batch-mode deploy -DskipTests 

      - name: Publish - MUnit Application Coverage Report
        #if: ${{ false }}    
        uses: actions/upload-artifact@master
        with:
          name: munit-application-coverage-report
          path: target/site/munit/coverage/*
      
      - name: Publish - MUnit Report
        #if: ${{ false }}
        uses: actions/upload-artifact@master
        with:
          name: munit-test-report
          path: target/surefire-reports/*

      - name: Publish - JAR 
        uses: actions/upload-artifact@master
        with:
          name: jar
          path: target/*.jar

      - name: Publish - POM 
        uses: actions/upload-artifact@master
        with:
          name: pom
          path: pom.xml
          
      - id: dev-configuration-cloudhub
        name: Get the configuration for cloud deployment
        uses: jpontdia/devops-pipelines/packages/configuration-file@main
        with:
          configuration-access-token: $configuration_access_token
          yaml-path: ".cloudhub"
          suffix: "-dev"

      - id: verify-deployment
        name: Verify deployment to development environment
        run: |
          echo "dev cloudhub: ${{ steps.dev-configuration-cloudhub.outputs.configuration-data }}"
          if [ "${{ steps.dev-configuration-cloudhub.outputs.configuration-data }}" != "" ] ; then
            echo "deployment=true" >> $GITHUB_OUTPUT
            echo "The service has the configuration to deploy in development environment"
          else
            echo "deployment=false" >> $GITHUB_OUTPUT
            echo "The mulesoft asset doesn't have any deployment configuration"
          fi
         
  ##########################################################################
  # DEPLOYMENT TO DEV
  ##########################################################################
  
  deploy-dev:
    if: needs.build.outputs.deployment == 'true'
    name: DEV
    needs: [build]
    runs-on: ubuntu-latest
    environment:
      name: dev
    steps:
      - name: Get JAR file
        uses: actions/download-artifact@v2
        with:
          name: jar

      - name: Get POM file
        uses: actions/download-artifact@v2
        with:
          name: pom

      - name: Get secrets
        uses: jpontdia/devops-pipelines/packages/get-secrets@main
        with:
          keyvault-key: jpworks-keyvault
          azure-credentials: ${{ secrets.azure-credentials }}

      - id: install-anypoint-cli
        name: Install Mulesoft Anypoint CLI
        uses: jpontdia/devops-pipelines/packages/install-anypoint-cli@main

      - id: dev-configuration-cloudhub
        name: Get the configuration for cloud deployment
        uses: jpontdia/devops-pipelines/packages/configuration-file@main
        with:
          configuration-access-token: $configuration_access_token
          yaml-path: ".cloudhub"
          suffix: "-dev"

      - id: dev-configuration-service
        name: Get the configuration properties for the service
        uses: jpontdia/devops-pipelines/packages/configuration-file@main
        with:
          configuration-access-token: $configuration_access_token
          yaml-path: ".properties"
          suffix: "-dev"
  
      - id: dev-configuration-deployment-name
        name: Get the deployment name for the service
        uses: jpontdia/devops-pipelines/packages/configuration-file@main
        with:
          configuration-access-token: $configuration_access_token
          yaml-path: ".deployment-name"
          suffix: "-dev"

      - id: deployment-development
        name: Deploy the service to dev environment
        uses: jpontdia/devops-pipelines/packages/deployment-cloudhub@main
        with:
          deployment-name: "${{ steps.dev-configuration-deployment-name.outputs.configuration-data }}"
          connectedapp-clientid: "$cicd_connectedapp_clientid"
          connectedapp-secret: "$cicd_connectedapp_secret" 
          configuration-cloud: "${{ steps.dev-configuration-cloudhub.outputs.configuration-data }}"
          configuration-service: "${{ steps.dev-configuration-service.outputs.configuration-data }}"
          environment: "dev"
  
  
  ##########################################################################
  # INTEGRATION TESTING - DEVELOPMENT
  ##########################################################################

  testing-dev:
    name: DEV test
    needs: [deploy-dev]
    runs-on: ubuntu-latest
    steps:
      - name: Get the source code
        uses: actions/checkout@v3

      - name: Install API Functional Monitoring
        run: |
          curl -o- 'https://s3.amazonaws.com/bat-wrapper/install.sh' | bash
          echo "bat -version: $(bat -version)"

      - name: Run tests
        run: |
          cd bat
          mkdir target
          bat

      - name: Publish - Test reports
        # if: ${{ false }}    
        uses: actions/upload-artifact@master
        with:
            name: test-reports
            path: output-reports/*.*


  ##########################################################################
  # DEPLOYMENT TO TST
  ##########################################################################
  
  deploy-tst:
    name: TST
    needs: [testing-dev]
    runs-on: ubuntu-latest
    environment:
      name: tst
    steps:
      - name: Get JAR file
        uses: actions/download-artifact@v2
        with:
          name: jar

      - name: Get POM file
        uses: actions/download-artifact@v2
        with:
          name: pom

      - name: Get secrets
        uses: jpontdia/devops-pipelines/packages/get-secrets@main
        with:
          keyvault-key: jpworks-keyvault
          azure-credentials: ${{ secrets.azure-credentials }}

      - id: install-anypoint-cli
        name: Install Mulesoft Anypoint CLI
        uses: jpontdia/devops-pipelines/packages/install-anypoint-cli@main

      - id: tst-configuration-cloudhub
        name: Get the configuration for cloud deployment
        uses: jpontdia/devops-pipelines/packages/configuration-file@main
        with:
          configuration-access-token: $configuration_access_token
          yaml-path: ".cloudhub"
          suffix: "-tst"

      - id: tst-configuration-service
        name: Get the configuration properties for the service
        uses: jpontdia/devops-pipelines/packages/configuration-file@main
        with:
          configuration-access-token: $configuration_access_token
          yaml-path: ".properties"
          suffix: "-tst"
  
      - id: tst-configuration-deployment-name
        name: Get the deployment name for the service
        uses: jpontdia/devops-pipelines/packages/configuration-file@main
        with:
          configuration-access-token: $configuration_access_token
          yaml-path: ".deployment-name"
          suffix: "-tst"

      - id: deployment-tst
        name: Deploy the service to tst environment
        uses: jpontdia/devops-pipelines/packages/deployment-cloudhub@main
        with:
          deployment-name: "${{ steps.tst-configuration-deployment-name.outputs.configuration-data }}"
          connectedapp-clientid: "$cicd_connectedapp_clientid"
          connectedapp-secret: "$cicd_connectedapp_secret" 
          configuration-cloud: "${{ steps.tst-configuration-cloudhub.outputs.configuration-data }}"
          configuration-service: "${{ steps.tst-configuration-service.outputs.configuration-data }}"
          environment: "tst"