##########################################################################
# CICD Pipeline
##########################################################################

# Configuration for this template:
# 1.- Replace the predefined repository jpontdia/common-devops with your own.
# 2.- Update the global environment variables for the script 

name: Mulesoft
on:
  workflow_call:
    inputs:
      keyvault-key:
        required: true
        description: Access key to KeyVault
        type: string
    secrets:
      azure-credentials:
        required: true
        description: Azure Credentials for login
env:
  DEFAULT_SETTINGS_XML: settings.xml
  GITHUB_ORGANIZATION: jpontdia
  CONFIGURATIONS_REPOSITORY: common-configurations
  
jobs:

  ##########################################################################
  # BUILD MULESOFT SERVICE
  ##########################################################################

  build:
    name: Build
    runs-on: ubuntu-latest

    # Needed by the Unit Test Action
    permissions:
      contents: write
      issues: write
      checks: write

    steps:

      - name: Get the source code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Get global configuration for the pipeline
        uses: jpontdia/common-devops/packages/configuration-service@main
        with:
          keyvault-key: ${{ inputs.keyvault-key }}
          azure-credentials: ${{ secrets.azure-credentials }}
          github-organization: $GITHUB_ORGANIZATION
          configurations-repository: $CONFIGURATIONS_REPOSITORY
          environment: unit-test

      - name: Verify if github tag exists
        shell: bash
        run: |
          echo " "
          echo "***********************************************"
          echo "Verify if github tag exists "
          echo "***********************************************"
          echo " "
          git config --global user.name "GitHubActions"
          git config --global user.email "github-actions@users.noreply.github.com"

          tag_exist=$(git tag $service_version)
          if [ "$tag_exist" != "" ] ; then
            echo "The tag already exists in Github; update the POM version for the service."
            exit 1
          else
            echo "Create tag $service_version for the respository"
          fi

      - name: Install Java JDK for Mulesoft Applications
        uses: jpontdia/common-devops/packages/install-java@main
        with:
          github-configurations-accesstoken: $github_configurations_accesstoken
          default-settings-xml: $DEFAULT_SETTINGS_XML
          github-organization: $GITHUB_ORGANIZATION
          configurations-repository: $CONFIGURATIONS_REPOSITORY

      - name: Documentation - Anypoint Exchange
        run: |
          echo " "
          if [ -d "exchange-docs" ]; then
              echo "Directory exchange-docs exists and will not be overriden with README.md" 
          else
            echo "Creating exchange-doc directory with home.md from README.md"
            mkdir -p exchange-docs
            mkdir -p exchange-docs/docs
            cp -Rfpv README.md exchange-docs/home.md
            cp -Rfpv docs/*.* exchange-docs/docs 
          fi
          echo " "
        
      - name: Compile code    
        run: mvn --batch-mode compile
  
      - name: Run test cases and package
        id: run-test-cases
        shell: bash
        run: |
          echo " "
          echo "***********************************************"
          echo "Run test cases and package"
          echo "***********************************************"
          echo " "
          skiptest=" "
          if [[ "${{env.configuration_skiptest}}" == "true" ]]; then
            skiptest="-DskipTests"
            echo "  Test will be skipped"
          else
            echo "  Asset will be tested"
          fi
    
          echo " Using maven to run test cases and package Mulesoft application"
          mvn --batch-mode $skiptest package $configuration_unittest

      - name: Summary - Test
        if: ${{ hashFiles('target/surefire-reports/*') != '' }}
        uses: jpontdia/common-devops/packages/build-testsummary@main
        with:
          github-organization: ${{ env.GITHUB_ORGANIZATION }}
          gist-id: ${{ env.github_gist_id }}
          gist-token: ${{ env.github_gist_accesstoken }}

      - name: Deploy to anypoint exchange
        #if: ${{ false }}    
        run: |
          ## Deploy to anypoint exchange
          mvn --batch-mode deploy -DskipTests 

      - name: Publish - Application Coverage Report
        #if: ${{ false }}
        if: ${{ hashFiles('target/site/munit/coverage/*') != '' }}
        uses: actions/upload-artifact@master
        with:
          name: munit-application-coverage-report
          path: target/site/munit/coverage/*
      
      - name: Publish - MUnit Report
        #if: ${{ false }}
        if: ${{ hashFiles('target/surefire-reports/*') != '' }}
        uses: actions/upload-artifact@master
        with:
          name: munit-test-report
          path: target/surefire-reports/*

      - name: Publish - JAR 
        uses: actions/upload-artifact@master
        if: ${{ hashFiles('target/*.jar') != '' }}
        with:
          name: jar
          path: target/*.jar

      - name: Tag repository with service version
        shell: bash
        run: |
          echo " "
          echo "***********************************************"
          echo "Tag repository with service version "
          echo "***********************************************"
          echo " "
          git push origin $service_version
          
      - name: Create a release
        uses: ncipollo/release-action@v1
        with: 
          artifacts: "target/*.jar"
          artifactErrorsFailBuild: true
          tag: ${{ env.service_version }}
          name: ${{ env.service_version }}

      - name: Create badge for release
        uses: jpontdia/common-devops/packages/badge@main
        with:
          github-organization: ${{ env.GITHUB_ORGANIZATION }}
          gist-id: ${{ env.github_gist_id }}
          gist-token: ${{ env.github_gist_accesstoken }}
          label: Release
          status: '${{ env.service_version }}'
          color: '535597'
          file: ${{ env.service_name }}-re.svg

      - name: Create badge for workflow number
        uses: jpontdia/common-devops/packages/badge@main
        with:
          github-organization: ${{ env.GITHUB_ORGANIZATION }}
          gist-id: ${{ env.github_gist_id }}
          gist-token: ${{ env.github_gist_accesstoken }}
          label: Build job
          status: '${{ github.run_number }}'
          color: '535597'
          file: ${{ env.service_name }}-wf.svg

      - id: issue-create
        name: Create deployment issue
        env:
          GITHUB_TOKEN: ${{ env.github_issues_accesstoken }}
        shell: bash
        run: |
          echo " "
          echo "***********************************************"
          echo "Create Deployment Issue "
          echo "***********************************************"
          echo " "
          echo "  Create issue for deployment in dev"
          gh -R "${{ github.repository }}" issue create \
              -t "Deployment dev ${{ env.service_name }} ${{ env.service_version }}" \
              -a "${{ env.github_deployeruser }}" \
              -b "The build job triggered this action. An analysis task will be responsible for checking if the service is deployable." \
              -l "forward,dev"