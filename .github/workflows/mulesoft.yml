name: Mulesoft
on:
  workflow_call:
    inputs:
      keyvault-key:
        required: true
        description: Access key to KeyVault
        type: string
    secrets:
      azure-credentials:
        required: true
        description: Azure Credentials for login
env:
  DEFAULT_SETTINGS_XML: settings.xml        
  deployment_dev: "false"
  deployment_tst: "false"
  deployment_prd: "false"

jobs:

  ##########################################################################
  # BUILD MULESOFT SERVICE
  ##########################################################################

  build:
    name: Build
    runs-on: ubuntu-latest
    outputs:
      deployment: ${{ steps.verify-deployment.outputs.deployment }}
    steps:
      # Checks-out your repository under $GITHUB_WORKSPACE, so the job can access it
      - name: Get the source code
        uses: actions/checkout@v3

      - name: Cache local Maven repository
        uses: actions/cache@v3
        with:
          path: ~/.m2/repository
          key: ${{ runner.os }}-maven-${{ hashFiles('**/pom.xml') }}
          restore-keys: |
            ${{ runner.os }}-maven-
                
      - name: Setup JDK 8
        uses: actions/setup-java@v3
        with:
          java-version: '8'
          distribution: 'temurin'
          #check-latest: true
          cache: 'maven'

      - name: Get default secrets for the pipeline
        uses: jpontdia/devops-pipelines/packages/get-secrets@main
        with:
          keyvault-key: jpworks-keyvault
          azure-credentials: ${{ secrets.azure-credentials }}

      - name: Get the settings file for maven
        uses: jpontdia/devops-pipelines/packages/settings-maven@main
        with:
          configuration-access-token: $configuration_access_token
          default-settings-xml: $DEFAULT_SETTINGS_XML 

      - id: configuration-tests
        name: Get configuration file for test cases
        uses: jpontdia/devops-pipelines/packages/configuration-file@main
        with:
          configuration-access-token: $configuration_access_token
          yaml-path: ".test-properties"
          
      - name: Copy Anypoint Exchange documentation
        run: |
          cp -Rfpv README.md exchange-docs/home.md
          cp -Rfpv docs/*.* exchange-docs/docs/*.* 
      
      - name: DEBUG - Show settings file
        run: |
          ls -la $HOME
          cat $HOME/.m2/settings.xml
          echo "Github run number: ${{ github.run_number }}"
          echo "testing: ${{ steps.configuration-tests.outputs.configuration-data }}"
          ## Get the git commit hash 
          commitHash=$(git rev-parse --short "$GITHUB_SHA")
          echo "Github commit hash: $commitHash"

      - id: dev-configuration-cloudhub
        name: Get the configuration for cloud deployment
        uses: jpontdia/devops-pipelines/packages/configuration-file@main
        with:
          configuration-access-token: $configuration_access_token
          yaml-path: ".cloudhub"
          suffix: "-dev"

      - id: verify-deployment
        name: Verify deployment to development environment
        run: |
          echo "dev cloudhub: ${{ steps.dev-configuration-cloudhub.outputs.configuration-data }}"
          if [ "${{ steps.dev-configuration-cloudhub.outputs.configuration-data }}" != "" ] ; then
            echo "deployment=true" >> $GITHUB_OUTPUT
            echo "There is a configuration to deploy the service in development environment"
          else
            echo "deployment=false" >> $GITHUB_OUTPUT
            echo "The mulesoft asset doesn't have any deployment configuration"
          fi
         
  ##########################################################################
  # DEPLOYMENT TO DEV
  ##########################################################################
  
  deploy-dev:
    if: needs.build.outputs.deployment == 'true'
    name: Development
    needs: [build]
    runs-on: ubuntu-latest
    environment:
      name: dev
    steps:
      - name: test
        run: |
          echo "build.outputs.deploy: ${{ needs.build.outputs.deployment}}"