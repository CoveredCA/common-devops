##########################################################################
# CICD Pipeline
##########################################################################

# Configuration for this template:
# 1.- Replace the predefined repository jpontdia/common-devops with your own.
# 2.- Update the global environment variables for the script 

name: Mulesoft
on:
  workflow_call:
    inputs:
      keyvault-key:
        required: true
        description: Access key to KeyVault
        type: string
    secrets:
      azure-credentials:
        required: true
        description: Azure Credentials for login
env:
  DEFAULT_SETTINGS_XML: settings.xml
  GITHUB_ORGANIZATION: jpontdia
  CONFIGURATIONS_REPOSITORY: common-configurations
  
jobs:

  ##########################################################################
  # BUILD MULESOFT SERVICE
  ##########################################################################

  build:
    name: Build
    runs-on: ubuntu-latest
    # Needed by the Unit Test Action
    permissions:
      contents: read
      issues: read
      checks: write
      pull-requests: write    
    outputs:
      # Indicates if the service is deployable
      deployment-dev: ${{ steps.verify-deployment-dev.outputs.deployment }}
      deployment-tst: ${{ steps.verify-deployment-tst.outputs.deployment }}
    steps:

      - name: Get the source code
        uses: actions/checkout@v3

      - name: Install Java JDK for Mulesoft Applications
        uses: jpontdia/common-devops/packages/install-mulesoft-java@main

      - name: Get global configuration for the pipeline
        uses: jpontdia/common-devops/packages/configuration@main
        with:
          keyvault-key: ${{ inputs.keyvault-key }}
          azure-credentials: ${{ secrets.azure-credentials }}
          github-organization: $GITHUB_ORGANIZATION
          configurations-repository: $CONFIGURATIONS_REPOSITORY

      - name: Settings file for maven
        uses: jpontdia/common-devops/packages/settings-maven@main
        with:
          github-configurations-accesstoken: $github_configurations_accesstoken
          default-settings-xml: $DEFAULT_SETTINGS_XML
          github-organization: $GITHUB_ORGANIZATION
          configurations-repository: $CONFIGURATIONS_REPOSITORY
          
      - name: Documentation - Anypoint Exchange
        run: |
          if [ -d "exchange-docs" ] 
            then
              echo "Directory exchange-docs exists and will not be overriden with README.md" 
            else
              mkdir -p exchange-docs
              mkdir -p exchange-docs/docs
              cp -Rfpv README.md exchange-docs/home.md
              cp -Rfpv docs/*.* exchange-docs/docs 
            fi
        
      - name: Compile code
        #if: ${{ false }}    
        run: mvn --batch-mode compile
  
      - name: Run test cases and package asset
        uses: jpontdia/common-devops/packages/package@main
        with:
          github-organization: $GITHUB_ORGANIZATION
          configurations-repository: $CONFIGURATIONS_REPOSITORY
          github-configurations-accesstoken: $github_configurations_accesstoken

      - name: Summary - Test
        if: ${{ hashFiles('target/surefire-reports/*') != '' }}
        uses: jpontdia/common-devops/packages/summary-test@main
        with:
          github-organization: ${{ env.GITHUB_ORGANIZATION }}
          gist-id: ${{ env.github_gist_id }}
          gist-token: ${{ env.github_gist_accesstoken }}
          debug: ${{ env.cicd_debug }}

      - name: Deploy to anypoint exchange
        #if: ${{ false }}    
        run: |
          ## Deploy to anypoint exchange
          mvn --batch-mode deploy -DskipTests 

      - name: Publish - Application Coverage Report
        #if: ${{ false }}
        if: ${{ hashFiles('target/site/munit/coverage/*') != '' }}
        uses: actions/upload-artifact@master
        with:
          name: munit-application-coverage-report
          path: target/site/munit/coverage/*
      
      - name: Publish - MUnit Report
        #if: ${{ false }}
        if: ${{ hashFiles('target/surefire-reports/*') != '' }}
        uses: actions/upload-artifact@master
        with:
          name: munit-test-report
          path: target/surefire-reports/*

      - name: Publish - JAR 
        uses: actions/upload-artifact@master
        if: ${{ hashFiles('target/*.jar') != '' }}
        with:
          name: jar
          path: target/*.jar

      - name: Publish - POM 
        uses: actions/upload-artifact@master
        with:
          name: pom
          path: pom.xml
          
      - id: verify-deployment-dev
        name: Verify if asset is deployable in dev
        uses: jpontdia/common-devops/packages/verify-deployment@main
        with:
          github-configurations-accesstoken: $github_configurations_accesstoken
          environment: dev
          github-organization: $GITHUB_ORGANIZATION
          configurations-repository: $CONFIGURATIONS_REPOSITORY
  
      - id: verify-deployment-tst
        name: Verify if asset is deployable in tst
        uses: jpontdia/common-devops/packages/verify-deployment@main
        with:
          github-configurations-accesstoken: $github_configurations_accesstoken
          environment: tst
          github-organization: $GITHUB_ORGANIZATION
          configurations-repository: $CONFIGURATIONS_REPOSITORY

  ##########################################################################
  # DEV DEPLOYMENT
  ##########################################################################
  
  dev:
    if: needs.build.outputs.deployment-dev == 'true'
    name: dev
    needs: [build]
    runs-on: ubuntu-latest
    environment:
      name: dev
    steps:

      - name: Deploy the service in the cloud
        uses: jpontdia/common-devops/packages/cloudhub-deployment@main
        with:
          keyvault-key: ${{ inputs.keyvault-key }}
          azure-credentials: ${{ secrets.azure-credentials }}
          github-organization: $GITHUB_ORGANIZATION
          configurations-repository: $CONFIGURATIONS_REPOSITORY
          deployment-env: dev


  ##########################################################################
  # DEV TEST
  ##########################################################################

  dev-test:
    name: dev-test
    needs: [dev]
    runs-on: ubuntu-latest
    steps:

      - name: Get the source code
        uses: actions/checkout@v3

      - name: Get global configuration for the pipeline
        uses: jpontdia/common-devops/packages/configuration@main
        with:
          keyvault-key: ${{ inputs.keyvault-key }}
          azure-credentials: ${{ secrets.azure-credentials }}
          github-organization: $GITHUB_ORGANIZATION
          configurations-repository: $CONFIGURATIONS_REPOSITORY

      - id: configuration-service
        name: Get the configuration properties for the service
        uses: jpontdia/common-devops/packages/configuration-file@main
        with:
          github-configurations-accesstoken: $github_configurations_accesstoken
          yaml-path: ".env"
          suffix: "-dev"
          github-organization: ${{ env.GITHUB_ORGANIZATION }}
          configurations-repository: ${{ env.CONFIGURATIONS_REPOSITORY }}

      - name: Generate environment variables for the service
        shell: bash
        run: |
          echo " "
          echo "***********************************************"
          echo "Generate environment variables for the service "
          echo "***********************************************"
          echo " "

          service_configuration_raw='${{ steps.configuration-service.outputs.configuration-data }}'

          if [ "$pathdata" = "null" ] ; then
            echo "** The yaml path was not found with the environment variables section, returning empty response"
            pathdata=""
          else
            service_configuration_lines=$( echo $service_configuration_raw | tr ' ' '\n' )
            echo -e "Configuration formated:\n$service_configuration_lines "
            echo " "

            echo "Variables found: "
            echo "$service_configuration_lines" | while read p; do

              # Get variable and value
              line=$(echo "$p")
              name="$(cut -d'=' -f1 <<<$line)"
              value="$(cut -d'=' -f2 <<< $line)"
              echo "- name: " $name
              echo "  value: " $value

              # Override the value with a possible environment variable
              value_fromvariable=$(eval "echo $value")
              echo "  new value: " $value_fromvariable

              echo "  Create environment variable"
              echo "$name=$value_fromvariable" >> $GITHUB_ENV

            done          
          fi

      - name: Execute Mulesoft BAT
        uses: jpontdia/common-devops/packages/bat@main
    
      - name: Publish - Test reports
        uses: actions/upload-artifact@master
        with:
            name: dev-testing-reports
            path: bat/target/*.*

      - name: Job summary with test results
        uses: EnricoMi/publish-unit-test-result-action@v2.7.0
        with:
          files: |
            bat/target/JUnit.xml
          check_name: Dev Integration Test


  ##########################################################################
  # TST DEPLOYMENT
  ##########################################################################
  
  tst:
    if: needs.build.outputs.deployment-tst == 'true'
    name: tst
    needs: [dev-test]
    runs-on: ubuntu-latest
    environment:
      name: tst
    steps:

      - name: Deploy the service in the cloud
        uses: jpontdia/common-devops/packages/cloudhub-deployment@main
        with:
          keyvault-key: ${{ inputs.keyvault-key }}
          azure-credentials: ${{ secrets.azure-credentials }}
          github-organization: $GITHUB_ORGANIZATION
          configurations-repository: $CONFIGURATIONS_REPOSITORY
          deployment-env: tst
