name: Mulesoft
on:
  workflow_call:
    inputs:
      keyvault-key:
        required: true
        description: Access key to KeyVault
        type: string
    secrets:
      azure-credentials:
        required: true
        description: Azure Credentials for login
env:
  DEFAULT_SETTINGS_XML: settings.xml
  GITHUB_ORGANIZATION: jpontdia
  CONFIGURATIONS_REPOSITORY: mule-configurations
  GIST_ID: ef8cdef1ff940eac4d8716f6361d2363
jobs:

  ##########################################################################
  # BUILD MULESOFT SERVICE
  ##########################################################################

  build:
    name: Build
    runs-on: ubuntu-latest
    # Needed by the Unit Test Action
    permissions:
      contents: read
      issues: read
      checks: write
      pull-requests: write    
    outputs:
      # Indicates if the service will be deployed to development environment
      deployment: ${{ steps.verify-deployment.outputs.deployment }}
    steps:

      - name: Get the source code
        uses: actions/checkout@v3

      - name: Install Java JDK for Mulesoft Applications
        uses: jpontdia/devops-pipelines/packages/install-mulesoft-java@main

      - name: Get default secrets for the pipeline
        uses: jpontdia/devops-pipelines/packages/secrets@main
        with:
          keyvault-key: ${{ inputs.keyvault-key }}
          azure-credentials: ${{ secrets.azure-credentials }}
          github-organization: $GITHUB_ORGANIZATION
          configurations-repository: $CONFIGURATIONS_REPOSITORY

      - name: Get the settings file for maven
        uses: jpontdia/devops-pipelines/packages/settings-maven@main
        with:
          github-configurations-accesstoken: $github_configurations_accesstoken
          default-settings-xml: $DEFAULT_SETTINGS_XML
          github-organization: $GITHUB_ORGANIZATION
          configurations-repository: $CONFIGURATIONS_REPOSITORY

      - name: Get configuration file for test cases
        id: configuration-tests
        uses: jpontdia/devops-pipelines/packages/configuration-file@main
        with:
          github-configurations-accesstoken: $github_configurations_accesstoken
          yaml-path: ".test-properties"
          github-organization: $GITHUB_ORGANIZATION
          configurations-repository: $CONFIGURATIONS_REPOSITORY
          
      - name: Documentation - Anypoint Exchange
        run: |
          cp -Rfpv README.md exchange-docs/home.md
          cp -Rfpv docs/*.* exchange-docs/docs/*.* 

      - name: Get the pom service information
        id: service-info
        uses: jpontdia/devops-pipelines/packages/service-info@main
        
      - name: Compile code
        #if: ${{ false }}    
        run: mvn --batch-mode compile
  
      - name: Run test cases and package
        run: mvn --batch-mode package ${{ steps.configuration-tests.outputs.configuration-data }}

      - name: Summary - Unit test cases
        uses: jpontdia/devops-pipelines/packages/summary-testcases@main
        with:
          gist-token: $github_gist_accesstoken
          github-organization: ${{ env.GITHUB_ORGANIZATION }}
          badge-gist-id: ${{ env.GIST_ID }}
          debug: "true"
      
      - name: Upload badge to Gist
        uses: andymckay/append-gist-action@1fbfbbce708a39bd45846f0955ed5521f2099c6d
        with:
          token: $github_gist_accesstoken
          gistURL: "https://gist.githubusercontent.com/${{ env.GITHUB_ORGANIZATION }}/${{ env.GIST_ID }}"
          file: ${{ steps.service-info.outputs.name }}-ut.svg

      - name: Summary - Code coverage
        uses: jpontdia/devops-pipelines/packages/summary-codecoverage@main
        with:
          gist-token: $github_gist_accesstoken
          github-organization: ${{ env.GITHUB_ORGANIZATION }}
          badge-gist-id: ${{ env.GIST_ID }}

      - name: Deploy to anypoint exchange
        #if: ${{ false }}    
        run: |
          ## Deploy to anypoint exchange
          mvn --batch-mode deploy -DskipTests 

      - name: Publish - MUnit Application Coverage Report
        #if: ${{ false }}    
        uses: actions/upload-artifact@master
        with:
          name: munit-application-coverage-report
          path: target/site/munit/coverage/*
      
      - name: Publish - MUnit Report
        #if: ${{ false }}
        uses: actions/upload-artifact@master
        with:
          name: munit-test-report
          path: target/surefire-reports/*

      - name: Publish - JAR 
        uses: actions/upload-artifact@master
        with:
          name: jar
          path: target/*.jar

      - name: Publish - POM 
        uses: actions/upload-artifact@master
        with:
          name: pom
          path: pom.xml
          
      - id: dev-configuration-cloudhub
        name: Deployment dev - Get configuration
        uses: jpontdia/devops-pipelines/packages/configuration-file@main
        with:
          github-configurations-accesstoken: $github_configurations_accesstoken
          yaml-path: ".cloudhub"
          suffix: "-dev"
          github-organization: $GITHUB_ORGANIZATION
          configurations-repository: $CONFIGURATIONS_REPOSITORY          

      - id: verify-deployment
        name: Deployment dev - Verify if asset has the configuration
        run: |
          echo "dev cloudhub: ${{ steps.dev-configuration-cloudhub.outputs.configuration-data }}"
          if [ "${{ steps.dev-configuration-cloudhub.outputs.configuration-data }}" != "" ] ; then
            echo "deployment=true" >> $GITHUB_OUTPUT
            echo "The service has the configuration to deploy in development environment"
          else
            echo "deployment=false" >> $GITHUB_OUTPUT
            echo "The mulesoft asset doesn't have any deployment configuration"
          fi
  
  ##########################################################################
  # DEPLOYMENT TO DEV
  ##########################################################################
  
  deploy-dev:
    if: needs.build.outputs.deployment == 'true'
    name: DEV
    needs: [build]
    runs-on: ubuntu-latest
    environment:
      name: dev
    steps:

      - name: Deploy the service in the cloud
        uses: jpontdia/devops-pipelines/packages/cloudhub-deployment@main
        with:
          keyvault-key: ${{ inputs.keyvault-key }}
          azure-credentials: ${{ secrets.azure-credentials }}
          github-organization: $GITHUB_ORGANIZATION
          configurations-repository: $CONFIGURATIONS_REPOSITORY
          deployment-env: dev


  ##########################################################################
  # INTEGRATION TESTING - DEVELOPMENT
  ##########################################################################

  testing-dev:
    name: DEV Test
    needs: [deploy-dev]
    runs-on: ubuntu-latest
    steps:
      - name: Get the source code
        uses: actions/checkout@v3

      - name: Install API Functional Monitoring
        run: |
          curl -o- 'https://s3.amazonaws.com/bat-wrapper/install.sh' | bash
          echo "bat -version: $(bat -version)"

      - name: Run tests
        run: |
          cd bat
          mkdir target
          bat

      - name: Publish - Test reports
        # if: ${{ false }}    
        uses: actions/upload-artifact@master
        with:
            name: dev-testing-reports
            path: bat/target/*.*

      - name: Job summary with test results
        uses: EnricoMi/publish-unit-test-result-action@v2
        if: always()
        with:
          files: |
            bat/target/JUnit.xml

  ##########################################################################
  # TESTING ENVIRONMENT
  ##########################################################################
  
  deploy-tst:
    name: TST
    needs: [testing-dev]
    runs-on: ubuntu-latest
    environment:
      name: tst
    steps:

      - name: Deploy the service in the cloud
        uses: jpontdia/devops-pipelines/packages/cloudhub-deployment@main
        with:
          keyvault-key: ${{ inputs.keyvault-key }}
          azure-credentials: ${{ secrets.azure-credentials }}
          github-organization: $GITHUB_ORGANIZATION
          configurations-repository: $CONFIGURATIONS_REPOSITORY
          deployment-env: tst
