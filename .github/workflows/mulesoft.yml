name: Mulesoft
on:
  workflow_call:
    inputs:
      keyvault-key:
        required: true
        description: Access key to KeyVault
        type: string
    secrets:
      azure-credentials:
        required: true
        description: Azure Credentials for login
      configurations-token:
        required: true
        description: Access token to get the configuration for the service
env:
  initialsecretconfiguration: ""
  configurationmap: "" 
jobs:

  ##########################################################################
  # BUILD MULESOFT SERVICE
  ##########################################################################

  build:
    name: Build
    runs-on: ubuntu-latest
    env:
      #For testing dynamic content
      MavenCompile: mvn compile

    steps:
      # Checks-out your repository under $GITHUB_WORKSPACE, so the job can access it
      - name: Get the source code
        uses: actions/checkout@v3

      - name: Get default secrets for the pipeline
        uses: jpontdia/devops-pipelines/packages/get-secrets@main
        with:
          keyvault-key: jpworks-keyvault
          azure-credentials: ${{ secrets.azure-credentials }}

      - id: configuration-settings
        name: Get configuration file for test cases
        uses: jpontdia/devops-pipelines/packages/configuration-file@main
        with:
          configuration-access-token: $configuration_access_token
          yaml-path: ".settings"

      - id: settings-maven
        name: Get the settings file for maven
        uses: jpontdia/devops-pipelines/packages/configuration@main
        with:
          configuration-access-token: $configuration_access_token
          file: "${{ steps.configuration-settings.outputs.configuration-data }}"

      - name: configure settings file for maven
        run: |
          echo "Settings for maven: ${{ steps.settings-maven.outputs.configuration-data }}"
          echo "${{ steps.settings-maven.outputs.configuration-data }}" > $HOME/.m2/settings.xml
          echo "Github run number: ${{ github.run_number }}"    

      - name: Cache local Maven repository
        uses: actions/cache@v3
        with:
          path: ~/.m2/repository
          key: ${{ runner.os }}-maven-${{ hashFiles('**/pom.xml') }}
          restore-keys: |
            ${{ runner.os }}-maven-
                  
      - name: Setup JDK 8
        uses: actions/setup-java@v3
        with:
          java-version: '8'
          distribution: 'temurin'
          #check-latest: true
          cache: 'maven'
        
      - name: DEBUG - Show settings file
        run: |
          ls -la $HOME
          cat $HOME/.m2/settings.xml
          echo "Github run number: ${{ github.run_number }}"

      - name: Copy Anypoint Exchange documentation
        run: |
          cp -Rfpv README.md exchange-docs/home.md
          cp -Rfpv docs/*.* exchange-docs/docs/*.* 

      - id: configuration-tests
        name: Get configuration file for test cases
        uses: jpontdia/devops-pipelines/packages/configuration-file@main
        with:
          configuration-access-token: $configuration_access_token
          yaml-path: ".test-properties"
          prefix: ""
          suffix: ""
      
      - name: Compile code
        # I am using an environment variable just for testing dinamic content execution
        run: $MavenCompile

      - name: Run test cases and package
        run: |
          ## Get the git commit hash 
          commitHash=$(git rev-parse --short "$GITHUB_SHA")

          echo "Test properties: ${{ steps.configuration-tests.outputs.configuration-data }}"
          mvn package -DskipTests ${{ steps.configuration-tests.outputs.configuration-data }}

      - name: Deploy to anypoint exchange
        if: ${{ false }}    
        run: |
          ## Deploy to anypoint exchange
          mvn deploy -DskipTests 

      - name: Publish - MUnit Application Coverage Report
        if: ${{ false }}
        uses: actions/upload-artifact@master
        with:
          name: munit-application-coverage-report
          path: target/site/munit/coverage/*
      
      - name: Publish - MUnit Report
        if: ${{ false }}    
        uses: actions/upload-artifact@master
        with:
          name: munit-test-report
          path: target/surefire-reports/*

      - name: Publish - JAR 
        uses: actions/upload-artifact@master
        with:
          name: jar
          path: target/*.jar

      - name: Publish - POM 
        uses: actions/upload-artifact@master
        with:
          name: pom
          path: pom.xml


  ##########################################################################
  # DEPLOYMENT TO DEV
  ##########################################################################
  
  deploy-dev:
    name: Development
    if: ${{ false }}
    needs: [build]
    runs-on: ubuntu-latest

    environment:
      name: dev
      url: 'https://dev.myapp.com'
    steps:
      - name: Get JAR file
        uses: actions/download-artifact@v2
        with:
          name: jar

      - name: Get POM file
        uses: actions/download-artifact@v2
        with:
          name: pom

      - name: Get secrets
        uses: jpontdia/devops-pipelines/packages/get-secrets@main
        with:
          keyvault-key: jpworks-keyvault
          azure-credentials: ${{ secrets.azure-credentials }}

      - id: install-anypoint-cli
        name: Install Mulesoft Anypoint CLI
        uses: jpontdia/devops-pipelines/packages/install-anypoint-cli@main

      - id: configuration-cloudhub
        name: Get the configuration for cloud deployment
        uses: jpontdia/devops-pipelines/packages/configuration-file@main
        with:
          configuration-access-token: $configuration_access_token
          yaml-path: ".cloudhub"
          prefix: ""
          suffix: "-dev"

      - id: configuration-service
        name: Get the configuration for the service
        uses: jpontdia/devops-pipelines/packages/configuration-file@main
        with:
          configuration-access-token: $configuration_access_token
          yaml-path: ".properties"
          prefix: ""
          suffix: "-dev"
  
      - id: configuration-deployment-name
        name: Get the configuration for the service
        uses: jpontdia/devops-pipelines/packages/configuration-file@main
        with:
          configuration-access-token: $configuration_access_token
          yaml-path: ".deployment-name"
          prefix: ""
          suffix: "-dev"

      - id: service-info
        name: Get the pom service information
        uses: jpontdia/devops-pipelines/packages/service-info@main

      - id: deployment-development
        name: Deploy the service to dev environment
        uses: jpontdia/devops-pipelines/packages/deployment-cloudhub@main
        with:
          deployment-name: "${{ steps.configuration-deployment-name.outputs.configuration-data }}"
          connectedapp-clientid: "$cicd_connectedapp_clientid"
          connectedapp-secret: "$cicd_connectedapp_secret" 
          configuration-cloud: "${{ steps.configuration-cloudhub.outputs.configuration-data }}"
          configuration-service: "${{ steps.configuration-service.outputs.configuration-data }}"