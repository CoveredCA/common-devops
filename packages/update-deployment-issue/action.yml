name: Update Deployment Issue
description: Deployment issues need custom project fields filled out
inputs:
  organization:
    required: false
    default: "CoveredCA"
    description: Name of the organization the project is in
  project-number:
    required: false
    default: 5
    description: The number of the project from the project web url
  application-name:
    required: true
    default: "cca-salesforce-sapi"
    description: The name of the application the deployment issue was created for
  environment:
    required: true
    default: "dev"
    description: The enmviropnment the deployment issue is calling for
  version:
    required: true
    default: "1.0.10"
    description: The version of the application to be deployed to the environment
  token:
    required: true
    description: The token for the mulebot so that github api actions can be performed

runs:
  using: "composite"
  steps:
    - name: Split Version Fields
      id: version-fields
      shell: bash
      run: |
        echo ""
        echo "*************************"
        echo "* Split Version Numbers *"
        echo "*************************"
        echo ""
        VERSION_MAJOR=$(echo "${{ inputs.version }}" | cut -d "." -f 1)
        VERSION_MINOR=$(echo "${{ inputs.version }}" | cut -d "." -f 2)
        VERSION_PATCH=$(echo "${{ inputs.version }}" | cut -d "." -f 3)
        echo "VERSION_MAJOR == $VERSION_MAJOR"
        echo "VERSION_MINOR == $VERSION_MINOR"
        echo "VERSION_PATCH == $VERSION_PATCH"
        echo "VERSION_MAJOR=$VERSION_MAJOR" >> $GITHUB_OUTPUT
        echo "VERSION_MINOR=$VERSION_MINOR" >> $GITHUB_OUTPUT
        echo "VERSION_PATCH=$VERSION_PATCH" >> $GITHUB_OUTPUT

    - name: Get project ID
      id: project-id
      shell: bash
      env:
        GITHUB_TOKEN: ${{ inputs.token }}
      run: |
        echo ""
        echo "******************"
        echo "* Get Project ID *"
        echo "******************"
        echo ""
        PROJECT_ID=$(gh api graphql -f query='{
          organization(login: "${{ inputs.organization }}") {
            login
            projectsV2(first: 100) {
              edges {
                node {
                  id
                  title
                }
              }
            }
          }
        }' | jq -r '.data.organization.projectsV2.edges[] | select(.node.title | test("Deployment")) | .node.id')

        echo "PROJECT_ID=$PROJECT_ID" >> $GITHUB_OUTPUT

    - name: Get issue ID
      id: issue-id
      shell: bash
      env:
        GITHUB_TOKEN: ${{ inputs.token }}
      run: |
        echo ""
        echo "****************"
        echo "* Get Issue ID *"
        echo "****************"
        echo ""

        # Initial cursor is empty
        CURSOR=""

        # Loop until all pages are fetched
        while : ; do
            # Execute GraphQL query
            RESPONSE=$(gh api graphql -f query='
            query($org: String!, $number: Int!, $cursor: String) {
                organization(login: $org) {
                    projectV2(number: $number) {
                        items(first: 100, after: $cursor) {
                            pageInfo {
                                hasNextPage
                                endCursor
                            }
                            nodes {
                                id
                                content {
                                    ... on Issue {
                                        id
                                        number
                                        title
                                    }
                                }
                            }
                        }
                    }
                }
            }' -f org="${{ inputs.organization }}" -F number="${{ inputs.project-number }}" -f cursor="$CURSOR")

            # Parse items and do something with them, e.g., append to a file
            echo "$RESPONSE" | jq '.data.organization.projectV2.items.nodes[]' >> deployment_issues.json

            # Check if there's a next page; if not, break the loop
            HAS_NEXT_PAGE=$(echo "$RESPONSE" | jq '.data.organization.projectV2.items.pageInfo.hasNextPage')
            if [ "$HAS_NEXT_PAGE" != "true" ]; then
                break
            fi

            # Update cursor to fetch next page
            CURSOR=$(echo "$RESPONSE" | jq -r '.data.organization.projectV2.items.pageInfo.endCursor')
        done

        echo "All items fetched successfully."

        echo "Parsing output data file"

        ISSUE_ID=$(jq -r '. | select(.content.title | test("Deployment")) | select(.content.title | test("${{ inputs.environment }}")) | select(.content.title | test("${{ inputs.application-name }}")) | select(.content.title | test("${{ inputs.version }}")) | .id' deployment_issues.json)

        echo "ISSUE_ID=$ISSUE_ID" >> $GITHUB_OUTPUT

    - name: Get field IDs
      id: field-id
      shell: bash
      env:
        GITHUB_TOKEN: ${{ inputs.token }}
      run: |
        echo ""
        echo "******************"
        echo "* Get Field ID's *"
        echo "******************"
        echo ""

        FIELD_DATA=$(gh api graphql -f query='
                    query($org: String!, $number: Int!) {
                      organization(login: $org){
                        projectV2(number: $number) {
                          id
                          fields(first:20) {
                            nodes {
                              ... on ProjectV2Field {
                                id
                                name
                              }
                            ... on ProjectV2IterationField {
                            id
                            name
                            configuration {
                                iterations {
                                startDate
                                id
                                }
                            }
                            }
                              ... on ProjectV2SingleSelectField {
                                id
                                name
                                options {
                                  id
                                  name
                                }
                              }
                            }
                          }
                        }
                      }
                    }' -f org="${{ inputs.organization }}" -F number="${{ inputs.project-number }}" | jq '.data.organization.projectV2.fields.nodes[] | select((.name | test("Environment")) or (.name | test("Version")) or (.name | test("major")) or (.name | test("minor")) or (.name | test("patch")) or (.name | test("Created On")) or (.name | test("Iteration")))')

        FIELD_ID_ENVIRONMENT=$(echo "$FIELD_DATA" | jq -r '. | select(.name | test("Environment")) | .id')
        FIELD_ID_VERSION=$(echo "$FIELD_DATA" | jq -r '. | select(.name | test("Version")) | .id')
        FIELD_ID_MAJOR=$(echo "$FIELD_DATA" | jq -r '. | select(.name | test("major")) | .id')
        FIELD_ID_MINOR=$(echo "$FIELD_DATA" | jq -r '. | select(.name | test("minor")) | .id')
        FIELD_ID_PATCH=$(echo "$FIELD_DATA" | jq -r '. | select(.name | test("patch")) | .id')
        FIELD_ID_CREATEDON=$(echo "$FIELD_DATA" | jq -r '. | select(.name | test("Created On")) | .id')
        FIELD_ID_ITERATION=$(echo "$FIELD_DATA" | jq -r '. | select(.name | test("Iteration")) | .id')
        CURRENT_ITERATION_ID=$(echo "$FIELD_DATA" | jq -r '. | select(.name | test("Iteration")) | .configuration.iterations[0].id')

        echo "FIELD_ID_ENVIRONMENT=$FIELD_ID_ENVIRONMENT" >> $GITHUB_OUTPUT
        echo "FIELD_ID_VERSION=$FIELD_ID_VERSION" >> $GITHUB_OUTPUT
        echo "FIELD_ID_MAJOR=$FIELD_ID_MAJOR" >> $GITHUB_OUTPUT
        echo "FIELD_ID_MINOR=$FIELD_ID_MINOR" >> $GITHUB_OUTPUT
        echo "FIELD_ID_PATCH=$FIELD_ID_PATCH" >> $GITHUB_OUTPUT
        echo "FIELD_ID_CREATEDON=$FIELD_ID_CREATEDON" >> $GITHUB_OUTPUT
        echo "FIELD_ID_ITERATION=$FIELD_ID_ITERATION" >> $GITHUB_OUTPUT
        echo "CURRENT_ITERATION_ID=$CURRENT_ITERATION_ID" >> $GITHUB_OUTPUT

    - name: Get Environment Field Option ID
      id: environment-option-id
      shell: bash
      env:
        GITHUB_TOKEN: ${{ inputs.token }}
      run: |
        echo ""
        echo "***********************************"
        echo "* Get Environment Field Option ID *"
        echo "***********************************"

        FIELD_ENVIRONMENT_OPTION_ID=$(gh api graphql -f query='
                    query($org: String!, $number: Int!) {
                      organization(login: $org){
                        projectV2(number: $number) {
                          id
                          fields(first:20) {
                            nodes {
                              ... on ProjectV2Field {
                                id
                                name
                              }
                              ... on ProjectV2SingleSelectField {
                                id
                                name
                                options {
                                  id
                                  name
                                }
                              }
                            }
                          }
                        }
                      }
                    }' -f org="${{ inputs.organization }}" -F number="${{ inputs.project-number }}" | jq -r '.data.organization.projectV2.fields.nodes[] | select(.name=="Environment").options[] | select(.name=="${{ inputs.environment }}") | .id'

        echo "FIELD_ENVIRONMENT_OPTION_ID=$FIELD_ENVIRONMENT_OPTION_ID" >> $GITHUB_OUTPUT

    - name: Update Deployment Issue Environment Field
      shell: bash
      env:
        GITHUB_TOKEN: ${{ inputs.token }}
      run: |
        echo ""
        echo "******************************"
        echo "* Updating Environment Field *"
        echo "******************************"
        echo ""
        gh api graphql -f query='
            mutation {
                updateProjectV2ItemFieldValue(
                    input: {
                        projectId: "${{steps.project-id.outputs.PROJECT_ID}}"
                        itemId: "${{ steps.issue-id.outputs.ISSUE_ID }}"
                        fieldId: "${{ steps.field-id.outputs.FIELD_ID_ENVIRONMENT }}"
                        value: {
                            singleSelectOptionId: "${{ steps.environment-option-id.outputs.FIELD_ENVIRONMENT_OPTION_ID }}"
                        }
                    }
                )
                {
                    projectV2Item {
                        id
                    }
                }
            }'

    - name: Update Deployment Issue Version Field
      shell: bash
      env:
        GITHUB_TOKEN: ${{ inputs.token }}
      run: |
        echo ""
        echo "**************************"
        echo "* Updating Version Field *"
        echo "**************************"
        echo ""
        gh api graphql -f query='
            mutation {
                updateProjectV2ItemFieldValue(
                    input: {
                        projectId: "${{steps.project-id.outputs.PROJECT_ID}}"
                        itemId: "${{ steps.issue-id.outputs.ISSUE_ID }}"
                        fieldId: "${{ steps.field-id.outputs.FIELD_ID_VERSION }}"
                        value: {
                            text: "${{ inputs.version }}"
                        }
                    }
                )
                {
                    projectV2Item {
                        id
                    }
                }
            }'

    - name: Update Version Individual Fields
      shell: bash
      env:
        GITHUB_TOKEN: ${{ inputs.token }}
      run: |
        echo ""
        echo "**************************************"
        echo "* Updating Individual Version Fields *"
        echo "**************************************"
        echo ""
        echo "*****************"
        echo "* MAJOR VERSION *"
        echo "*****************"
        echo ""
        gh api graphql -f query='
            mutation {
                updateProjectV2ItemFieldValue(
                    input: {
                        projectId: "${{steps.project-id.outputs.PROJECT_ID}}"
                        itemId: "${{ steps.issue-id.outputs.ISSUE_ID }}"
                        fieldId: "${{ steps.field-id.outputs.FIELD_ID_MAJOR }}"
                        value: {
                            number: ${{ steps.version-fields.outputs.VERSION_MAJOR }}
                        }
                    }
                )
                {
                    projectV2Item {
                        id
                    }
                }
            }'

        echo ""
        echo "*****************"
        echo "* MINOR VERSION *"
        echo "*****************"
        echo ""
        gh api graphql -f query='
            mutation {
                updateProjectV2ItemFieldValue(
                    input: {
                        projectId: "${{steps.project-id.outputs.PROJECT_ID}}"
                        itemId: "${{ steps.issue-id.outputs.ISSUE_ID }}"
                        fieldId: "${{ steps.field-id.outputs.FIELD_ID_MINOR }}"
                        value: {
                            number: ${{ steps.version-fields.outputs.VERSION_MINOR }}
                        }
                    }
                )
                {
                    projectV2Item {
                        id
                    }
                }
            }'

        echo ""
        echo "*****************"
        echo "* PATCH VERSION *"
        echo "*****************"
        echo ""
        gh api graphql -f query='
            mutation {
                updateProjectV2ItemFieldValue(
                    input: {
                        projectId: "${{steps.project-id.outputs.PROJECT_ID}}"
                        itemId: "${{ steps.issue-id.outputs.ISSUE_ID }}"
                        fieldId: "${{ steps.field-id.outputs.FIELD_ID_PATCH }}"
                        value: {
                            number: ${{ steps.version-fields.outputs.VERSION_PATCH }}
                        }
                    }
                )
                {
                    projectV2Item {
                        id
                    }
                }
            }'

    - name: Update Created On Date Field
      shell: bash
      env:
        GITHUB_TOKEN: ${{ inputs.token }}
      run: |
        echo ""
        echo "**********************************"
        echo "* Updating Created On Date Field *"
        echo "**********************************"
        echo ""
        echo "Generate date for date field"
        echo ""
        CREATED_ON_DATE=$(date +'%Y-%m-%d')
        echo "Date used: $CREATED_ON_DATE"
        echo ""
        gh api graphql -f query='
            mutation {
                updateProjectV2ItemFieldValue(
                    input: {
                        projectId: "${{steps.project-id.outputs.PROJECT_ID}}"
                        itemId: "${{ steps.issue-id.outputs.ISSUE_ID }}"
                        fieldId: "${{ steps.field-id.outputs.FIELD_ID_CREATEDON }}"
                        value: {
                            date: "$CREATED_ON_DATE"
                        }
                    }
                )
                {
                    projectV2Item {
                        id
                    }
                }
            }'

    - name: Update Iteration Field
      shell: bash
      env:
        GITHUB_TOKEN: ${{ inputs.token }}
      run: |
        echo ""
        echo "**********************************"
        echo "* Updating Created On Date Field *"
        echo "**********************************"
        echo ""
        gh api graphql -f query='
            mutation {
                updateProjectV2ItemFieldValue(
                    input: {
                        projectId: "${{steps.project-id.outputs.PROJECT_ID}}"
                        itemId: "${{ steps.issue-id.outputs.ISSUE_ID }}"
                        fieldId: "${{ steps.field-id.outputs.FIELD_ID_ITERATION }}"
                        value: {
                            iterationId: "$CURRENT_ITERATION_ID"
                        }
                    }
                )
                {
                    projectV2Item {
                        id
                    }
                }
            }'
