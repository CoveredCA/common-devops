name: 'Deploys a service to Cloudhub/GovCloud'
description: 'Deploys a service to Cloudhub/GovCloud'
inputs:
  keyvault-key:
    required: true
    description: The name of the KeyVault
  azure-credentials:
    required: true
    description: Azure Credentials for login
  github-organization:
    required: true
    description: Name of the github organization that is used to locate the secrets mapping file
  configurations-repository:
    required: true
    description: Name of the repository for mulesoft configurations
  deployment-env:
    required: true
    description: Deployment environment for the service
  host:
    required: false
    description: The host of your Anypoint Platform Installation. This value defaults to anypoint.mulesoft.com.
    default: anypoint.mulesoft.com
runs:
  using: "composite"
  steps:

  - name: Get JAR file
    uses: actions/download-artifact@v3
    with:
      name: jar

  - name: Get POM file
    uses: actions/download-artifact@v3
    with:
      name: pom

  - name: Get default secrets for the pipeline
    uses: jpontdia/common-devops/packages/secrets@main
    with:
      keyvault-key: ${{ inputs.keyvault-key }}
      azure-credentials: ${{ inputs.azure-credentials }}
      github-organization: ${{ inputs.github-organization }}
      configurations-repository: ${{ inputs.configurations-repository }}

  - id: install-anypoint-cli
    name: Install Mulesoft Anypoint CLI
    uses: jpontdia/common-devops/packages/install-anypoint-cli@main

  - id: configuration-cloudhub
    name: Get the configuration for cloud deployment
    uses: jpontdia/common-devops/packages/configuration-file@main
    with:
      github-configurations-accesstoken: $github_configurations_accesstoken
      yaml-path: ".cloudhub"
      suffix: "-${{ inputs.deployment-env }}"
      github-organization: ${{ inputs.github-organization }}
      configurations-repository: ${{ inputs.configurations-repository }}          

  - id: configuration-service
    name: Get the configuration properties for the service
    uses: jpontdia/common-devops/packages/configuration-file@main
    with:
      github-configurations-accesstoken: $github_configurations_accesstoken
      yaml-path: ".properties"
      suffix: "-${{ inputs.deployment-env }}"
      github-organization: ${{ inputs.github-organization }}
      configurations-repository: ${{ inputs.configurations-repository }} 

  - id: configuration-deployment-name
    name: Get the deployment name for the service
    uses: jpontdia/common-devops/packages/configuration-file@main
    with:
      github-configurations-accesstoken: $github_configurations_accesstoken
      yaml-path: ".deployment-name"
      suffix: "-${{ inputs.deployment-env }}"
      github-organization: ${{ inputs.github-organization }}
      configurations-repository: ${{ inputs.configurations-repository }} 

  - id: configuration-deployment-organization
    name: Get the deployment organization
    uses: jpontdia/common-devops/packages/configuration-file@main
    with:
      github-configurations-accesstoken: $github_configurations_accesstoken
      yaml-path: ".deployment-organization"
      suffix: "-${{ inputs.deployment-env }}"
      github-organization: ${{ inputs.github-organization }}
      configurations-repository: ${{ inputs.configurations-repository }} 

  - id: deployment
    name: Deploy the service to dev environment
    uses: jpontdia/common-devops/packages/cloudhub-anypoint-cli@main
    with:
      deployment-name: "${{ steps.configuration-deployment-name.outputs.configuration-data }}"
      connectedapp-clientid: "$cicd_connectedapp_clientid"
      connectedapp-secret: "$cicd_connectedapp_secret" 
      configuration-cloud: "${{ steps.configuration-cloudhub.outputs.configuration-data }}"
      configuration-service: "${{ steps.configuration-service.outputs.configuration-data }}"
      host: ${{ inputs.host }}
      environment: ${{ inputs.deployment-env }}
      organization: "${{ steps.configuration-deployment-organization.outputs.configuration-data }}"