name: 'Deploys a service to Cloudhub/GovCloud'
description: 'Deploys a service to Cloudhub/GovCloud'
inputs:
  keyvault-key:
    required: true
    description: The name of the KeyVault
  azure-credentials:
    required: true
    description: Azure Credentials for login
  github-organization:
    required: true
    description: Name of the github organization that is used to locate the secrets mapping file
  configurations-repository:
    required: true
    description: Name of the repository for mulesoft configurations
  deployment-env:
    required: true
    description: Deployment environment for the service
  host:
    required: false
    description: The host of your Anypoint Platform Installation. This value defaults to anypoint.mulesoft.com.
    default: anypoint.mulesoft.com
runs:
  using: "composite"
  steps:

  - name: Get JAR file
    uses: actions/download-artifact@v3
    with:
      name: jar

  - name: Get POM file
    uses: actions/download-artifact@v3
    with:
      name: pom
  
  - name: Get global configuration for the pipeline
    uses: jpontdia/common-devops/packages/configuration-service@main
    with:
      keyvault-key: ${{ inputs.keyvault-key }}
      azure-credentials: ${{ inputs.azure-credentials }}
      github-organization: ${{ inputs.github-organization }}
      configurations-repository: ${{ inputs.configurations-repository }}
      environment: ${{ inputs.deployment-env }}

  - id: install-anypoint-cli
    name: Install Mulesoft Anypoint CLI
    uses: jpontdia/common-devops/packages/install-anypoint-cli@main

  - id: deployment
    name: Deploy the service to the cloud
    shell: bash
    run: |
      echo " "
      echo "***************************************"
      echo "* Deploy the service to the cloud"
      echo "***************************************"
      echo " "

      # Next variables come from environment variables
      # cicd_connectedapp_clientid="${{ inputs.connectedapp-clientid}}"
      # cicd_connectedapp_secret="${{ inputs.connectedapp-secret}}"


      # Assign variables for the script
      echo "Assigning variables to the script"
      deploymentname="${{ env.configuration_deployment_name }}"
      deploymentenvironment="${{ inputs.deployment-env }}"
      deploymentorganization="${{ env.configuration_deployment_organization }}"
      deploymenthost="${{ inputs.host }}"
      propscloud="${{ env.configuration_cloudhub }}"
      propsservice="${{ env.configuration_properties }}"

      # Get the jar file
      jar=$(ls *.jar)
      echo "Jar file: $jar"

      start=$(date +%s)
      echo "Deployment process start. anypoint-cli-v4: $(anypoint-cli-v4 --version)"

      QUERY_STATUS="anypoint-cli-v4 runtime-mgr cloudhub-application describe \
                  --client_id $cicd_connectedapp_clientid \
                  --client_secret $cicd_connectedapp_secret \
                  --environment $deploymentenvironment \
                  --organization $deploymentorganization \
                  --host $deploymenthost \
                  --output json $deploymentname"

      # Get the current status of the service
      echo "Getting the status for the service,   query command: $QUERY_STATUS"

      # Get the current status of the service 
      DEPLOYMENT_INFO=$($QUERY_STATUS || true)
      echo "Quering status: $DEPLOYMENT_INFO"
      STATUS=$(echo $DEPLOYMENT_INFO | jq -r ".status")
      UPDATE_STATUS=$(echo $DEPLOYMENT_INFO | jq -r ".deploymentUpdateStatus")  
      echo "Service: $deploymentname status: $STATUS, updateStatus: $UPDATE_STATUS"

      # Verify if deployment is for update or new application
      operation="deploy"
      if [ "$STATUS" = "DEPLOYING" ]; then
        echo "The service was already in DEPLOYING state, wait until deployment finish or delete it"
        exit 1 # terminate and indicate error 
      else
        if [ "$STATUS" != "" ]; then
          operation="modify"
        fi
      fi

      # Execute deployment of the service
      echo ""
      echo "Deployment operation for serivce: $deploymentname is: $operation"
      end=$(date +%s)
      echo "  Elapsed time: $(($end-$start)) seconds"
      echo "Deploying...."
      CREATEUPDATE_APP="anypoint-cli-v4 runtime-mgr cloudhub-application $operation \
      --client_id $cicd_connectedapp_clientid \
      --client_secret $cicd_connectedapp_secret \
      --organization $deploymentorganization \
      --host $deploymenthost \
      --environment $deploymentenvironment \
      $propscloud $propsservice --output json $deploymentname $jar"
      echo "deployment command: $CREATEUPDATE_APP"
      $CREATEUPDATE_APP
      end=$(date +%s)
      echo ""
      echo "Deployment finished, verifying the deployment...."
      echo "  Elapsed time: $(($end-$start)) seconds" 

      # Process to verify if the service was deployed correctly
      iteration=1
      limit=60
      while true
      do 
        sleep 5

        # Get the current status of the service 
        DEPLOYMENT_INFO=$($QUERY_STATUS)
        # echo "Quering status: $DEPLOYMENT_INFO"
        STATUS=$(echo $DEPLOYMENT_INFO | jq -r ".status")
        UPDATE_STATUS=$(echo $DEPLOYMENT_INFO | jq -r ".deploymentUpdateStatus")  
        echo "Service: $deploymentname status: $STATUS, updateStatus: $UPDATE_STATUS"

        end=$(date +%s)
        echo "  Elapsed time: $(($end-$start)) seconds, iteration: $iteration limit: $limit"

        if [ "$operation" = "deploy" ]; then 
            # Create service

            if [ "$STATUS" = "STARTED" ] || [ $iteration -eq $limit ]; then
              break # Abandon the while loop.
            fi
        else
            # Update service
            if [ "$UPDATE_STATUS" = "null" ] || [ "$UPDATE_STATUS" = "DEPLOY_FAILED" ] || [ $iteration -eq $limit ]; then
              break # Abandon the while loop.
            fi
        fi

        iteration=$(( $iteration + 1 ))
      done

      # Verify if service was successfully deployed 
      if [ "$operation" = "deploy" ]; then

        # Create new service
        if [ "$STATUS" != "STARTED" ]; then
          echo "Error: The service was not deployed in the expected time, review logs"
          echo "  example: anypoint-cli-v4 runtime-mgr cloudhub-application download-logs {APP-NAME}"
          echo "The expected iterations were 44 but the proccess reached the limit: $limit"

          exit 1 # terminate and indicate error 
        else 
          echo "Deployment successful.."
        fi
      else
        # Update service
        if [ "$UPDATE_STATUS" = "DEPLOY_FAILED" ]; then
          echo "Error: There were errors while deploying the service"
          exit 1 # terminate and indicate error
        elif [ $iteration -eq $limit ]; then
          echo "Error: The service was not deployed in the expected time, review logs"
          echo "  example: anypoint-cli-v4 runtime-mgr cloudhub-application download-logs {APP-NAME}"
          echo "The expected iterations were 44 but the proccess reached the limit: $limit"

          exit 1 # terminate and indicate error
        else
          echo "Deployment successful.."
        fi
      fi
      echo " "