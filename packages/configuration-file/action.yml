name: 'Get configuration file'
description: 'Get the configuration file for the service defined in pom.xml'
inputs:
  configuration-access-token:
    required: true
    description: Token to access the configuration repository
  yaml-path: 
    required: true
    description: Path to get the node in the yaml file
  prefix:
    required: false
    default: ""
    description: Prefix for the configuration file
  suffix:
    required: false
    default: ""
    description: Suffix for the configuration file
outputs:
  configuration-data:
    description: "The contents of the configuration file"
    value: ${{ steps.configuration.outputs.configuration-data }}
runs:
  using: "composite"
  steps:

    - id: service-info
      name: Get the pom service information
      uses: jpontdia/devops-pipelines/packages/service-info@main
    
    - id: configuration
      name: Get configuration for the service 
      run: |

        # Get the configuration file for the service
        configurationfile=$(echo "${{ steps.service-info.outputs.name }}.yml")
        urlconfigurationfile="https://raw.githubusercontent.com/jpontdia/mule-configurations/main/$configurationfile"
        echo "Getting file: $urlconfigurationfile"
        configurationdata=$(curl -sH "Authorization: token $configuration_access_token" $urlconfigurationfile)
        pathdata=""

        # Verify if configuration file was found
        if [[ $configurationdata != *"Not Found"* ]]; then
          echo "A configuration file for the service was found, getting the yaml path: ${{ inputs.yaml-path}}"
          pathdata=$(echo "$configurationdata" | yq -r "${{ inputs.yaml-path}}")
          if [ "$pathdata" = "null" ] ; then
            echo "The yaml path was not found, returning empty response"
            pathdata=""
          fi
        else
          echo "No configuration file found, returning empty response"
        fi

        # Replace environment variables
        echo "Configuration data: $pathdata"
        echo "configuration-data=$(echo $pathdata)" >> $GITHUB_OUTPUT
      shell: bash