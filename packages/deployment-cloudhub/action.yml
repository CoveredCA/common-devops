name: 'Deployment to Cloudhub/GovCloud'
description: 'Deploy the service to Cloudhub/GovCloud'
inputs:
  deployment-name:
    required: true
    description: Name for the service in the deployment
  connectedapp-clientid: 
    required: true
    description: Connected App Client Id
  connectedapp-secret: 
    required: true
    description: Connected App Client Id
  configuration-cloud:
    required: true
    description: Configuration for cloud deployment
  configuration-service:
    required: true
    description: Configuration for the service
runs:
  using: "composite"
  steps:
    - id: deployment
      name: Get configuration for the service 
      run: |

          # Assign variables for the script
          cicd_connectedapp_clientid=${{ input.connectedapp-clientid}}
          cicd_connectedapp_secret=${{ input.connectedapp-secret}}
          deploymentname=${{ input.deployment-name}}
          propscloud=${{ input.configuration-cloud}}
          propsservice=${{ input.configuration-service}}

          # Get the jar file
          jar=$(ls *.jar)
          echo "Jar file: $jar"

          start=$(date +%s)
          echo "Deployment process start"

          QUERY_STATUS="anypoint-cli-v4 runtime-mgr cloudhub-application describe \
              --client_id $cicd_connectedapp_clientid \
              --client_secret $cicd_connectedapp_secret \
              --output json $deploymentname"

          # Get the current status of the service
          echo "Getting the status for the service"

          # Get the current status of the service 
          DEPLOYMENT_INFO=$(echo $QUERY_STATUS)
          STATUS=$(echo $DEPLOYMENT_INFO | jq -r ".status")
          UPDATE_STATUS=$(echo $DEPLOYMENT_INFO | jq -r ".deploymentUpdateStatus")  
          echo "Service: $deploymentname status: $STATUS, updateStatus: $UPDATE_STATUS"

          # Verify if deployment is for update or new application
          operation="deploy"
          if [ "$STATUS" = "DEPLOYING" ]; then
            echo "The service was already in DEPLOYING state, wait until deployment finish or delete it"
            exit 1 # terminate and indicate error 
          else
            if [ "$STATUS" != "" ]; then
              operation="modify"
            fi
          fi

          # Execute deployment of the service
          echo ""
          echo "Deployment operation for serivce: $deploymentname is: $operation"
          end=$(date +%s)
          echo "  Elapsed time: $(($end-$start)) seconds"
          echo "Deploying...."
          CREATEUPDATE_APP="anypoint-cli-v4 runtime-mgr cloudhub-application $operation \
          --client_id $cicd_connectedapp_clientid \
          --client_secret $cicd_connectedapp_secret \
          $propscloud $propsservice --output json $deploymentname $jar"
          echo "deployment command: $CREATEUPDATE_APP"
          $CREATEUPDATE_APP
          end=$(date +%s)
          echo ""
          echo "Deployment finished, verifying the deployment...."
          echo "  Elapsed time: $(($end-$start)) seconds" 

          # Process to verify if the service was deployed correctly
          iteration=1
          limit=60
          while true
          do 
            sleep 5

            # Get the current status of the service 
            DEPLOYMENT_INFO=$(echo $QUERY_STATUS)
            STATUS=$(echo $DEPLOYMENT_INFO | jq -r ".status")
            UPDATE_STATUS=$(echo $DEPLOYMENT_INFO | jq -r ".deploymentUpdateStatus")  
            echo "Service: $deploymentname status: $STATUS, updateStatus: $UPDATE_STATUS"
            end=$(date +%s)
            echo "  Elapsed time: $(($end-$start)) seconds, iteration: $iteration limit: $limit"

            if [ "$operation" = "deploy" ]; then 
                # Create service

                if [ "$STATUS" = "STARTED" ] || [ $iteration -eq $limit ]; then
                  break # Abandon the while loop.
                fi
            else
                # Update service
                if [ "$UPDATE_STATUS" = "null" ] || [ "$UPDATE_STATUS" = "DEPLOY_FAILED" ] || [ $iteration -eq $limit ]; then
                  break # Abandon the while loop.
                fi
            fi

            iteration=$(( $iteration + 1 ))
          done

          # Verify if service was successfully deployed 
          if [ "$operation" = "deploy" ]; then

            # Create new service
            if [ "$STATUS" != "STARTED" ]; then
              echo "Error: The service was not deployed in the expected time, review logs"
              echo "  example: anypoint-cli-v4 runtime-mgr cloudhub-application download-logs {APP-NAME}"
              echo "The expected iterations were 44 but the proccess reached the limit: $limit"

              exit 1 # terminate and indicate error 
            else 
              echo "Deployment successful.."
            fi
          else
            # Update service
            if [ "$UPDATE_STATUS" = "DEPLOY_FAILED" ]; then
              echo "Error: There were errors while deploying the service"
              exit 1 # terminate and indicate error
            elif [ $iteration -eq $limit ]; then
              echo "Error: The service was not deployed in the expected time, review logs"
              echo "  example: anypoint-cli-v4 runtime-mgr cloudhub-application download-logs {APP-NAME}"
              echo "The expected iterations were 44 but the proccess reached the limit: $limit"

              exit 1 # terminate and indicate error
            else
              echo "Deployment successful.."
            fi
          fi
      shell: bash