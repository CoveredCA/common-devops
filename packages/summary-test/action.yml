name: 'Summary - Publish test results'
description: 'Summary - Publish test results'
inputs:
  github-organization:
    required: true
    description: Name of the github organization
  gist-token:
    required: true
    description: Personal access token for github gist
  gist-id:
    required: true
    description: Id for the badge gist
  debug:
    required: false
    type: boolean
    default: false
    description: Flag to debug this action, default is false

runs:
  using: "composite"
  steps:
 
    - name: DEBUG
      if: ${{ inputs.debug }}
      shell: bash
      run: |
        echo " "
        echo "*****************************************************"
        echo "* Summary - Publish test results"
        echo "*****************************************************"
        echo "Input variables: "
        echo "  gist-token: $(echo ${{inputs.gist-token}} | sed 's/./& /g')"  
        echo "  gist-token-keyvault: $(echo ${{inputs.gist-token-keyvault}} | sed 's/./& /g')"  
        echo "  github-organization: ${{ inputs.github-organization }}"
        echo "  gist-id: ${{ inputs.gist-id }}"
        echo ".."

    - name: Get the pom service information
      id: service-info
      uses: jpontdia/common-devops/packages/service-info@main

    # ***************************
    # Unit test 
    # ***************************
    - name: Summary - Publish test results
      id: unit-test-results
      uses: EnricoMi/publish-unit-test-result-action@v2.7.0
      if: always()
      with:
        files: |
          target/surefire-reports/*.xml
        check_name: Unit Test Results

    - name: Set badge color
      shell: bash
      run: |
        echo " "
        echo "*****************************************************"
        echo "* Unit test - Set badge color"
        echo "*****************************************************"
        echo " "            
        case ${{ fromJSON( steps.unit-test-results.outputs.json ).conclusion }} in
          success)
            echo "BADGE_COLOR=31c653" >> $GITHUB_ENV
            ;;
          failure)
            echo "BADGE_COLOR=800000" >> $GITHUB_ENV
            ;;
          neutral)
            echo "BADGE_COLOR=696969" >> $GITHUB_ENV
            ;;
        esac

    - name: Create badge for unit test
      uses: jpontdia/common-devops/packages/badge@main
      with:
        github-organization: ${{ inputs.github-organization }}
        gist-token: ${{ inputs.gist-token }}
        gist-id: ${{ inputs.gist-id }}
        status: '${{ fromJSON( steps.unit-test-results.outputs.json ).formatted.stats.tests }} tests, ${{ fromJSON( steps.unit-test-results.outputs.json ).formatted.stats.runs }} runs: ${{ fromJSON( steps.unit-test-results.outputs.json ).conclusion }}'
        color: ${{ env.BADGE_COLOR }}
        file: ${{ steps.service-info.outputs.name }}-ut.svg

    # ***************************
    # Code coverage
    # ***************************
    - name: Summary - Add code coverage
      id: summary-codecoverage
      shell: bash
      run: |
        echo " "
        echo "*****************************************************"
        echo "* Code coverage - Get the summary report if exists"
        echo "*****************************************************"
        echo " "            

        summary_report=target/site/munit/coverage/summary.html

        # Verify if summary report exists
        if test -f "$summary_report"; then

          temporal=""
          line=0
          trigger=0
          while IFS= read -r p; do
          
            if [[ "$p" == *"<div class=\"col-md-8 col-md-offset-2\">"* ]]; then
              echo "Summary starts at line: $line"
              ((line=line+1))
              trigger=1
              continue
            fi

            if [[ $trigger == 1 ]]; then
              # echo "${p:0:6}"
              echo "$p"
              if [[ "${p:0:6}" == "</div>" ]]; then
                echo "Exit condition at line: $line"
                break
              else
                temporal+=$p
              fi
            fi

            ((line=line+1))
          done < $summary_report

          # Remove html tag: <a>
          temporal=$(sed -e 's/<\/a[^>]*>//g' <<<"$temporal")
          temporal=$(sed -e 's/<a[^>]*>//g' <<<"$temporal")

          # Add job summary 
          echo "<div>" >> $GITHUB_STEP_SUMMARY
          echo "$temporal" >> $GITHUB_STEP_SUMMARY
          echo "</div>" >> $GITHUB_STEP_SUMMARY

          # The coverage process was executed
          # echo "COVERAGE_PROCESS='True'" >> $GITHUB_ENV
          echo "CODE_COVERAGE_EXECUTION=true" >> $GITHUB_OUTPUT
        else
          # There is no summary report
          # echo "COVERAGE_PROCESS='False'" >> $GITHUB_ENV
          echo "CODE_COVERAGE_EXECUTION=false" >> $GITHUB_OUTPUT

        fi

    - name: Summary - Add code coverage
      shell: bash
      run: |
        echo " "
        echo "*****************************************************"
        echo "* Debug step"
        echo "*****************************************************"
        echo " "            
        echo " variable COVERAGE_PROCESS = " $COVERAGE_PROCESS

    - name: Set the code coverage results as environment variable
      if: steps.summary-codecoverage.outputs.CODE_COVERAGE_EXECUTION == 'true'
      #if: ${{ env.COVERAGE_PROCESS=='True' }}
      id: json_var
      shell: bash
      run: |
        echo " "
        echo "******************************************************"
        echo "* Code coverage - export the summary report as env var"
        echo "******************************************************"
        echo " "  

        content=`cat target/site/munit/coverage/munit-coverage.json`
        # the following lines are only required for multi line json
        content="${content//'%'/'%25'}"
        content="${content//$'\n'/'%0A'}"
        content="${content//$'\r'/'%0D'}"
        # end of optional handling for multi line json
        echo "::set-output name=packageJson::$content"

    - name: Set badge color
      if: steps.summary-codecoverage.outputs.CODE_COVERAGE_EXECUTION == 'true'
      #if: ${{ env.COVERAGE_PROCESS=='True' }}
      shell: bash
      run: |
        echo " "
        echo "*****************************************************"
        echo "* Code coverage - Set badge color"
        echo "*****************************************************"
        echo " "      
        coverage=${{ fromJSON(steps.json_var.outputs.packageJson).coverage }}
        minimum=${{ fromJSON(steps.json_var.outputs.packageJson).requiredApplicationCoverage }}
        echo "Application coverage: $coverage"
        echo "Minimum: $minimum"
        
        if [[ "$((coverage))" -ge "$((minimum))" ]]; then
          echo "BADGE_COLOR=31c653" >> $GITHUB_ENV
        else
          echo "BADGE_COLOR=800000" >> $GITHUB_ENV
        fi

    - name: Create badge for code coverage
      if: steps.summary-codecoverage.outputs.CODE_COVERAGE_EXECUTION == 'true'
      #if: ${{ env.COVERAGE_PROCESS=='True' }}
      uses: jpontdia/common-devops/packages/badge@main
      with:
        github-organization: ${{ inputs.github-organization }}
        gist-token: ${{ inputs.gist-token }}
        gist-id: ${{ inputs.gist-id }}
        status: '${{ fromJSON(steps.json_var.outputs.packageJson).coverage }}% of ${{ fromJSON(steps.json_var.outputs.packageJson).requiredApplicationCoverage }}%'
        color: ${{ env.BADGE_COLOR }}
        file: ${{ steps.service-info.outputs.name }}-cc.svg