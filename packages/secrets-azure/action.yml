name: Get secrets from Azure Key Vault
description: Get secrets from Azure Key Vault
inputs:
  keyvault-key:
    required: true
    description: The name of the KeyVault
  azure-credentials:
    required: true
    description: Azure Credentials for login
  secret-mapping:
    required: true
    description: Secret mapping file


runs:
  using: "composite"
  steps:

    - name: Debug action variables
      shell: bash
      run: |
        echo " "
        echo "*********************************************"      
        echo "Debug action variables"
        echo "*********************************************"
        echo " "
        tempvar=$( echo "${{ inputs.azure-credentials }}" | sed 's/./& /g' )
        echo "  azure-credentials: ${{ inputs.azure-credentials }}"
        echo "  keyvault-key: ${{ inputs.keyvault-key }}"
        echo "  secret-mapping: ${{ inputs.secret-mapping }}"
        echo " "

    - name: Authentication with Azure
      uses: azure/login@v2
      with:
        creds: ${{ inputs.azure-credentials }}
        
    - name: Test Azure CLI
      shell: bash
      run: |
        echo "  "
        echo "  az version"
        az version
        echo "  "
        echo "  az webapp"
        az webapp list --query "[?state=='Running']"

    - name: Get configuration files
      uses: CoveredCA/common-devops/packages/get-file@main
      with:
        file: ${{ inputs.secret-mapping }}
        checkIfExists: true

    - name: Get secrets configuration
      shell: bash
      run: |
        echo " "
        echo "*****************************************************"
        echo "Parse the secrets from the global configuration file"
        echo "*****************************************************"
        echo " "
        echo "  secret mapping: $configuration_data"

        pathdata=""
        function parse_yaml {
          pathdata=$(cat "$service_name.yml" | yq -r "$1")
          if [ "$pathdata" = "null" ] ; then
            echo " The yaml section was not found in the configuration file, section=$1"
            exit 1
          fi
        }
        
        echo " "
        parse_yaml '.secrets_azure'; echo "secrets_azure=$pathdata" >> $GITHUB_ENV
        echo "  secrets_azure: $pathdata"

        echo "$pathdata" | while IFS= read line
        do
          echo "  line: $line"
          if [[ "$line" =~ ^#.*  ]]; then
            echo "   A comment found"
          else
            # Get variable and value
            variable="$(cut -d'=' -f1 <<<$line)"
            secret_name="$(cut -d'=' -f2 <<< $line)"
            echo "    - variable: $variable"
            echo "      secret_name: $secret_name"
          fi
        done

        #secret_name="jks-alias"
        #value=$(az keyvault secret show --name $secret_name --vault-name ${{ inputs.keyvault-key }} --query value --output tsv)
        #echo "  Value found: $value"
        #echo "::add-mask::$value"
        #echo "$jks_dev_keypassword=$value" >> $GITHUB_ENV
        #echo "  Value found masked: $value"
        #exit 0

        #printf '%s\n' "$configuration_data" | while IFS= read -r line